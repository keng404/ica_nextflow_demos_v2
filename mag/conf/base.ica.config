manifest {
    name            = 'nf-core/mag'
    author          = 'Hadrien GourlÃ©, Daniel Straub, Sabrina Krakau'
    homePage        = 'https://github.com/nf-core/mag'
    description     = 'Assembly, binning and annotation of metagenomes'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version = '2.2.1'
}
process {
	withName:'CUSTOM_DUMPSOFTWAREVERSIONS' {
	errorStrategy = 'ignore'
	}
}
process {
//   publishDir = [
//        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
//        mode: params.publish_dir_mode,
//        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
//    ]
    pod = [
        annotation: 'scheduler.illumina.com/presetSize',
        value: 'himem-small'
    ]    
    cpus = 7
    memory = '60 GB'
    maxForks =  5
//    errorStrategy  = 'ignore'
//    maxRetries = 3
//    errorStrategy = { sleep(task.attempt * 60000 as long); return 'retry' } // Retry with increasing delay
	 withLabel:process_low  {
	 cpus = {  check_max( 2 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 12.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 4.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
	}

	 withLabel:process_medium  {
	 cpus = {  check_max( 6 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 36.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 8.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withLabel:process_high  {
	 cpus = {  check_max( 12 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 72.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 16.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withLabel:process_long  {
	 time = {  check_max( 20.h * task.attempt, 'time' )  }
	}

	 withLabel:process_high_memory  {
	 memory = {  check_max( 200.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'himem-large' ]
	}

	 withLabel:error_ignore  {
	 errorStrategy = { 'ignore' }
	}

	 withLabel:error_retry  {
	 errorStrategy = { 'retry' }
	 maxRetries = { 2 }
	}

	 withName:CUSTOM_DUMPSOFTWAREVERSIONS  {
	 cache =  false 
	}

	 withName:BOWTIE2_HOST_REMOVAL_BUILD  {
	 cpus = {  check_max (10 * task.attempt, 'cpus' )  }
	 memory = {  check_max (20.GB * task.attempt, 'memory' )  }
	 time = {  check_max (4.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:BOWTIE2_HOST_REMOVAL_ALIGN  {
	 cpus = {  check_max (10 * task.attempt, 'cpus' )  }
	 memory = {  check_max (10.GB * task.attempt, 'memory' )  }
	 time = {  check_max (6.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:BOWTIE2_PHIX_REMOVAL_ALIGN  {
	 cpus = {  check_max (4 * task.attempt, 'cpus' )  }
	 memory = {  check_max (8.GB * task.attempt, 'memory' )  }
	 time = {  check_max (6.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
	}

	 withName:PORECHOP  {
	 cpus = {  check_max (4 * task.attempt, 'cpus' )  }
	 memory = {  check_max (30.GB * task.attempt, 'memory' )  }
	 time = {  check_max (4.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:NANOLYSE  {
	 cpus = {  check_max (2 * task.attempt, 'cpus' )  }
	 memory = {  check_max (10.GB * task.attempt, 'memory' )  }
	 time = {  check_max (3.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
	}

	 withName:FILTLONG  {
	 cpus = {  check_max (8 * task.attempt , 'cpus' )  }
	 memory = {  check_max (64.GB * (2**(task.attempt-1)), 'memory' )  }
	 time = {  check_max (24.h * (2**(task.attempt-1)), 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withName:CENTRIFUGE  {
	 cpus = {  check_max (8 * task.attempt, 'cpus' )  }
	 memory = {  check_max (40.GB * task.attempt, 'memory' )  }
	 time = {  check_max (12.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:KRAKEN2  {
	 cpus = {  check_max (8 * task.attempt, 'cpus' )  }
	 memory = {  check_max (40.GB * task.attempt, 'memory' )  }
	 time = {  check_max (12.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:KRONA  {
	 cpus = {  check_max (8 * task.attempt, 'cpus' )  }
	 memory = {  check_max (20.GB * task.attempt, 'memory' )  }
	 time = {  check_max (12.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:CAT_DB_GENERATE  {
	 memory = {  check_max (200.GB * task.attempt, 'memory' )  }
	 time = {  check_max (16.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'himem-large' ]
	}

	 withName:CAT  {
	 cpus = {  check_max (8 * task.attempt, 'cpus' )  }
	 memory = {  check_max (40.GB * task.attempt, 'memory' )  }
	 time = {  check_max (12.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:GTDBTK_CLASSIFY  {
	 cpus = {  check_max (10 * task.attempt, 'cpus' )  }
	 memory = {  check_max (128.GB * task.attempt, 'memory' )  }
	 time = {  check_max (12.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'himem-large' ]
	}

	 withName:MEGAHIT  {
	 cpus = {  check_megahit_cpus (8, task.attempt )  }
	 memory = {  check_max (40.GB * task.attempt, 'memory' )  }
	 time = {  check_max (16.h * task.attempt, 'time' )  }
	 errorStrategy = {  task.exitStatus in [143,137,104,134,139,250] ? 'retry' : 'finish'  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:SPADES  {
	 cpus = {  check_spades_cpus (10, task.attempt)  }
	 memory = {  check_max (64.GB * (2**(task.attempt-1)), 'memory' )  }
	 time = {  check_max (24.h * (2**(task.attempt-1)), 'time' )  }
	 errorStrategy = {  task.exitStatus in [143,137,1] ? 'retry' : 'finish'  }
	 maxRetries = { 5 }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withName:SPADESHYBRID  {
	 cpus = {  check_spadeshybrid_cpus (10, task.attempt)  }
	 memory = {  check_max (64.GB * (2**(task.attempt-1)), 'memory' )  }
	 time = {  check_max (24.h * (2**(task.attempt-1)), 'time' )  }
	 errorStrategy = {  task.exitStatus in [143,137,1] ? 'retry' : 'finish'  }
	 maxRetries = { 5 }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withName:BOWTIE2_ASSEMBLY_ALIGN  {
	 cpus = {  check_max (2 * task.attempt, 'cpus' )  }
	 memory = {  check_max (8.GB * task.attempt, 'memory' )  }
	 time = {  check_max (8.h * task.attempt, 'time' )  }
	 errorStrategy = {  task.exitStatus in [143,137,104,134,139,247] ? 'retry' : 'finish'  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
	}

	 withName:METABAT2_METABAT2  {
	 cpus = {  check_max (8 * task.attempt, 'cpus' )  }
	 memory = {  check_max (20.GB * task.attempt, 'memory' )  }
	 time = {  check_max (8.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:MAG_DEPTHS  {
	 memory = {  check_max (16.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
	}

	 withName:BUSCO  {
	 cpus = {  check_max (8 * task.attempt, 'cpus' )  }
	 memory = {  check_max (20.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:MAXBIN2  {
	 errorStrategy = {  task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry'  }
	}

	 withName:DASTOOL_DASTOOL  {
	 errorStrategy = {  task.exitStatus in [143,137,104,134,139] ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish'  }
	}

}
