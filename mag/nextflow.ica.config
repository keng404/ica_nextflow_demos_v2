if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.single_end = false  
params.clip_tool = 'fastp'  
params.reads_minlength = 15  
params.fastp_save_trimmed_fail = false  
params.fastp_qualified_quality = 15  
params.fastp_cut_mean_quality = 15  
params.adapterremoval_minquality = 2  
params.adapterremoval_adapter1 = 'AGATCGGAAGAGCACACGTCTGAACTCCAGTCACNNNNNNATCTCGTATGCCGTCTTCTGCTTG'  
params.adapterremoval_adapter2 = 'AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGTAGATCTCGGTGGTCGCCGTATCATT'  
params.adapterremoval_trim_quality_stretch = false  
params.keep_phix = false  
params.phix_reference = "${baseDir}/assets/data/GCA_002596845.1_ASM259684v1_genomic.fna.gz"  
params.host_fasta = null  
params.host_genome = null  
params.host_removal_verysensitive = false  
params.host_removal_save_ids = false  
params.bowtie2_mode = null  
params.binning_map_mode = 'group'  
params.skip_binning = false  
params.min_contig_size = 1500  
params.min_length_unbinned_contigs = 1000000  
params.max_unbinned_contigs = 100  
params.skip_prokka = false  
params.coassemble_group = false  
params.spades_options = null  
params.megahit_options = null  
params.skip_spades = false  
params.skip_spadeshybrid = false  
params.skip_megahit = false  
params.skip_quast = false  
params.skip_prodigal = false  
params.ancient_dna = false  
params.freebayes_ploidy = 1  
params.freebayes_min_basequality = 20  
params.freebayes_minallelefreq = 0.33  
params.bcftools_view_high_variant_quality = 30  
params.bcftools_view_medium_variant_quality = 20  
params.bcftools_view_minimal_allelesupport = 3  
params.pydamage_accuracy = 0.5  
params.centrifuge_db = null  
params.kraken2_db = null  
params.skip_krona = false  
params.cat_db = null  
params.cat_db_generate = false  
params.save_cat_db = false  
params.gtdb = "https://data.ace.uq.edu.au/public/gtdb/data/releases/release202/202.0/auxillary_files/gtdbtk_r202_data.tar.gz"  
params.gtdbtk_min_completeness = 50.0  
params.gtdbtk_max_contamination = 10.0  
params.gtdbtk_min_perc_aa = 10  
params.gtdbtk_min_af = 0.65  
params.gtdbtk_pplacer_cpus = 1  
params.gtdbtk_pplacer_scratch = true  
params.skip_adapter_trimming = false  
params.keep_lambda = false  
params.longreads_min_length = 1000  
params.longreads_keep_percent = 90  
params.longreads_length_weight = 10  
params.lambda_reference = "${baseDir}/assets/data/GCA_000840245.1_ViralProj14204_genomic.fna.gz"  
params.skip_metabat2 = false  
params.skip_maxbin2 = false  
params.refine_bins_dastool = false  
params.refine_bins_dastool_threshold = 0.5  
params.postbinning_input = 'raw_bins_only'  
params.skip_busco = false  
params.busco_reference = null  
params.busco_download_path = null  
params.busco_auto_lineage_prok = false  
params.save_busco_reference = false  
params.megahit_fix_cpu_1 = false  
params.spades_fix_cpus = -1  
params.spadeshybrid_fix_cpus = -1  
params.metabat_rng_seed = 1  
params.igenomes_base = 's3://ngi-igenomes/igenomes'  
params.multiqc_config = null  
params.multiqc_title = null  
params.max_multiqc_email_size = '25.MB'  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
  includeConfig "${params.custom_config_base}/pipeline/mag.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config/mag profiles: ${params.custom_config_base}/pipeline/mag.config")
}
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
def check_megahit_cpus (x, attempt ) {
    if (params.megahit_fix_cpu_1) return 1
    else return check_max (x * attempt, 'cpus' )
}
def check_spades_cpus (x, attempt ) {
    if (params.spades_fix_cpus != -1) return check_max (params.spades_fix_cpus, 'cpus' )
    else return check_max (x * attempt, 'cpus' )
}
def check_spadeshybrid_cpus (x, attempt ) {
    if (params.spadeshybrid_fix_cpus != -1) return check_max (params.spadeshybrid_fix_cpus, 'cpus' )
    else return check_max (x * attempt, 'cpus' )
}
