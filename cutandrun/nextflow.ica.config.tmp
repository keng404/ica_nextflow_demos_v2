if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.genome = null  
params.spikein_genome = "K12-MG1655"  
params.gene_bed = null  
params.blacklist = null  
params.save_reference = false  
params.only_genome = false  
params.input = null  
params.save_merged_fastq = false  
params.only_input = false  
params.skip_fastqc = false  
params.only_preqc = false  
params.clip_r1 = 0  
params.clip_r2 = 0  
params.three_prime_clip_r1 = 0  
params.three_prime_clip_r2 = 0  
params.trim_nextseq = 0  
params.save_trimmed = false  
params.skip_trimming = false  
params.aligner = "bowtie2"  
params.save_spikein_aligned = false  
params.save_unaligned = false  
params.only_alignment = false  
params.save_align_intermed = false  
params.minimum_alignment_q_score = 20  
params.skip_removeduplicates = false  
params.dedup_target_reads = false  
params.only_filtering = false  
params.normalisation_mode = "Spikein"  
params.normalisation_binsize = 50  
params.normalisation_c = 10000  
params.igg_scale_factor = 0.5  
params.peakcaller = 'seacr'  
params.use_control = true  
params.only_peak_calling = false  
params.extend_fragments = true  
params.seacr_norm = 'non'  
params.seacr_stringent = 'stringent'  
params.seacr_peak_threshold = 0.05  
params.macs2_pvalue = 0.05  
params.macs_gsize = 2.7e9  
params.macs2_narrow_peak = true  
params.macs2_broad_cutoff = 0.1  
params.consensus_peak_mode = 'group'  
params.replicate_threshold = 1  
params.skip_reporting = false  
params.skip_igv = false  
params.skip_heatmaps = false  
params.skip_dt_qc = false  
params.skip_peak_qc = false  
params.skip_preseq = false  
params.skip_multiqc = false  
params.igv_show_gene_names = true  
params.min_frip_overlap = 0.20  
params.min_peak_overlap = 0.20  
params.dt_heatmap_gene_bodylen = 5000  
params.dt_heatmap_gene_beforelen = 3000  
params.dt_heatmap_gene_afterlen = 3000  
params.dt_heatmap_peak_beforelen = 3000  
params.dt_heatmap_peak_afterlen = 3000  
params.dt_qc_bam_binsize = 500  
params.fragment_size = 100 // PARAM NOT USED  
params.multiqc_config = null  
params.multiqc_title = null  
params.max_multiqc_email_size = "25.MB"  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.igenomes_base = "s3://ngi-igenomes/igenomes/"  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes,callers,dedup_control_only,fragment_size,run_igv,run_multiqc,run_reporting,run_consensus_all,run_peak_calling,run_remove_dups,run_mark_dups,run_read_filter,run_alignment,run_trim_galore_fastqc,run_cat_fastq,run_input_check,run_genome_prep,run_peak_qc,run_deeptools_qc,run_deeptools_heatmaps,run_preseq'  
params.custom_config_version = "master"  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_name = null  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.max_memory = "128.GB"  
params.max_cpus = 16  
params.max_time = "240.h"  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
includeConfig "conf/resources.config"
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
//     includeConfig "${params.custom_config_base}/pipeline/cutandrun.config"
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ["/bin/bash", "-euo", "pipefail"]
def trace_timestamp = new java.util.Date().format( "yyyy-MM-dd_HH-mm-ss")
    fields = "task_id,hash,native_id,name,status,exit,submit,start,complete,duration,realtime,cpus,time,memory,%cpu,peak_rss,peak_vmem,rchar,wchar"
}
includeConfig 'conf/flowswitch.config'
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == "memory") {
        try {
        if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "time") {
        try {
        if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
        else
            return obj
        } catch (all) {
        println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
        return obj
        }
    } else if (type == "cpus") {
        try {
        return Math.min( obj, params.max_cpus as int )
        } catch (all) {
        println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
        return obj
        }
    }
}
