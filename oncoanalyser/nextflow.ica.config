if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.mode = null  
params.processes_manual = false  
params.processes_include = null  
params.processes_exclude = null  
params.genome = null  
params.force_genome = false  
params.igenomes_base = 's3://ngi-igenomes/igenomes'  
params.max_fastq_records = 10000000  
params.isofox_counts = null  
params.isofox_gc_ratios = null  
params.isofox_gene_ids = null  
params.isofox_tpm_norm = null  
params.isofox_read_length = null  
params.isofox_functions = 'TRANSCRIPT_COUNTS;ALT_SPLICE_JUNCTIONS;FUSIONS;RETAINED_INTRONS'  
params.gridss_config = null  
params.prepare_reference_only = false  
params.create_stub_placeholders = false  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.config_profile_name = null  
params.config_profile_description = null  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_contact = null  
params.config_profile_url = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
lint_ignore = [
        'lint_ignore',
        'genome_type',
        'genome_version',
        'genomes',
        'hmf_data_paths',
        'panel',
        'panel_data_paths',
        'ref_data',
        'ref_data_genome_alt',
        'ref_data_genome_bwamem2_index',
        'ref_data_genome_dict',
        'ref_data_genome_fai',
        'ref_data_genome_fasta',
        'ref_data_genome_gridss_index',
        'ref_data_genome_gtf',
        'ref_data_genome_star_index',
        'ref_data_hla_slice_bed',
        'ref_data_hmf_data_path',
        'ref_data_panel_data_path',
        'ref_data_virusbreakenddb_path',
    ]
 
params.validationFailUnrecognisedParams = false  
params.validationLenientMode = true  
params.validationSchemaIgnoreParams = "igenomes_base,${lint_ignore.join(',')}" 
params.validationShowHiddenParams = false  
params.validate_params = true  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
includeConfig 'conf/base.ica.config'
includeConfig 'conf/hmf_data.config'
includeConfig 'conf/hmf_genomes.config'
includeConfig 'conf/panel_data.config'
if (params.containsKey('mode') && params.mode == 'targeted') {
    includeConfig 'conf/targeted_parameters.config'
}
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/oncoanalyser.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/oncoanalyser profiles: ${params.custom_config_base}/pipeline/oncoanalyser.config")
}
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'
process.shell = ['/bin/bash', '-euo', 'pipefail']
nextflow.enable.configProcessNamesValidation = false
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
