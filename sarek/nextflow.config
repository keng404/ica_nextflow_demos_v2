/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/sarek Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

params {
    // Workflow flags:

    // Mandatory arguments
    input = null      // No default input
    step  = 'mapping' // Starts with mapping

    // References
    genome          = 'GATK.GRCh38'
    igenomes_base   = 's3://ngi-igenomes/igenomes'
    igenomes_ignore = false
    save_reference  = false // Built references not saved

    // Main options
    no_intervals           = false      // Intervals will be built from the fasta file
    nucleotides_per_second = 1000       // Default interval size
    tools                  = null       // No default Variant_Calling or Annotation tools
    skip_tools             = null       // All tools (markduplicates + baserecalibrator + QC) are used by default
    split_fastq            = 50000000   // FASTQ files will not be split by default by FASTP

    // Modify fastqs (trim/split) with FASTP
    trim_fastq          = false // No trimming
    clip_r1             = 0
    clip_r2             = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq        = 0
    save_trimmed        = false
    save_split_fastqs   = false

    // UMI tagged reads
    umi_read_structure    = null        // no UMI
    group_by_umi_strategy = 'Adjacency' // default strategy when running with UMI for GROUPREADSBYUMI

    // Preprocessing
    aligner            = 'bwa-mem'  // Default is bwa-mem, bwa-mem2 and dragmap can be used too
    use_gatk_spark     = null       // GATK Spark implementation of their tools in local mode not used by default
    save_mapped        = false      // Mapped BAMs not saved
    save_output_as_bam = false      // Output files from preprocessing are saved as bam and not as cram files
    seq_center         = null       // No sequencing center to be written in read group CN field by aligner
    seq_platform       = 'ILLUMINA' // Default platform written in read group PL field by aligner

    // Variant Calling
    only_paired_variant_calling = false // if true, skips germline variant calling for normal-paired samples
    ascat_ploidy                = null  // default value for ASCAT
    ascat_min_base_qual         = 20    // default value for ASCAT
    ascat_min_counts            = 10    // default value for ASCAT
    ascat_min_map_qual          = 35    // default value for ASCAT
    ascat_purity                = null  // default value for ASCAT
    cf_ploidy                   = "2"   // default value for Control-FREEC
    cf_coeff                    = 0.05  // default value for Control-FREEC
    cf_contamination            = 0     // default value for Control-FREEC
    cf_contamination_adjustment = false // by default we are not using this in Control-FREEC
    cf_mincov                   = 0     // ControlFreec default values
    cf_minqual                  = 0     // ControlFreec default values
    cf_window                   = null  // by default we are not using this in Control-FREEC
    cnvkit_reference            = null  // by default the reference is build from the fasta file
    ignore_soft_clipped_bases   = false // no --dont-use-soft-clipped-bases for GATK Mutect2
    wes                         = false // Set to true, if data is exome/targeted sequencing data. Used to use correct models in various variant callers
    joint_germline              = false // g.vcf & joint germline calling are not run by default if HaplotypeCaller is selected

    // Annotation
    vep_out_format      = 'vcf'
    vep_dbnsfp          = null  // dbnsfp plugin disabled within VEP
    dbnsfp              = null  // No dbnsfp processed file
    dbnsfp_tbi          = null  // No dbnsfp processed file index
    dbnsfp_consequence  = null  // No default consequence for dbnsfp plugin
    dbnsfp_fields       = "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" // Default fields for dbnsfp plugin
    vep_loftee          = null  // loftee plugin disabled within VEP
    vep_spliceai        = null  // spliceai plugin disabled within VEP
    spliceai_snv        = null  // No spliceai_snv file
    spliceai_snv_tbi    = null  // No spliceai_snv file index
    spliceai_indel      = null  // No spliceai_indel file
    spliceai_indel_tbi  = null  // No spliceai_indel file index
    vep_spliceregion    = null  // spliceregion plugin disabled within VEP
    snpeff_cache        = null  // No directory for snpEff cache
    vep_cache           = null  // No directory for VEP cache
    vep_include_fasta   = false // Don't use fasta file for annotation with VEP

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = 'results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = 'genomes,snpeff_version,vep_version,cf_ploidy'
    enable_conda               = false


    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/sarek custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/sarek.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/sarek profiles: ${params.custom_config_base}/pipeline/sarek.config")
}

profiles {
    debug { process.beforeScript = 'echo $HOSTNAME' }
    conda {
        params.enable_conda    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    mamba {
        conda.useMamba         = true
        params.enable_conda    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
    }
    podman {
        podman.enabled         = true
        charliecloud.enabled   = false
        docker.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    shifter {
        shifter.enabled        = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        singularity.enabled    = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
    }
    gitpod {
        executor.cpus          = 16
        executor.memory        = 60.GB
        executor.name          = 'local'
    }
    // Basic test profile for CI
    test                       { includeConfig 'conf/test/test.config' }
    // Extra test profiles for full tests on AWS
    test_full                  { includeConfig 'conf/test/test_full.config' }
    test_full_germline         { includeConfig 'conf/test/test_full_germline.config' }
    // Extra test profiles for more complete CI
    alignment_to_fastq         { includeConfig 'conf/test/test_alignment_to_fastq.config' }
    annotation                 { includeConfig 'conf/test/test_annotation.config' }
    markduplicates_bam         { includeConfig 'conf/test/test_markduplicates_bam.config' }
    markduplicates_cram        { includeConfig 'conf/test/test_markduplicates_cram.config' }
    no_intervals               { includeConfig 'conf/test/test_no_intervals.config' }
    pair                       { includeConfig 'conf/test/test_pair.config' }
    prepare_recalibration_bam  { includeConfig 'conf/test/test_prepare_recalibration_bam.config' }
    prepare_recalibration_cram { includeConfig 'conf/test/test_prepare_recalibration_cram.config' }
    recalibrate_bam            { includeConfig 'conf/test/test_recalibrate_bam.config' }
    recalibrate_cram           { includeConfig 'conf/test/test_recalibrate_cram.config' }
    save_bam_mapped            { includeConfig 'conf/test/test_save_bam_mapped.config' }
    skip_bqsr                  { includeConfig 'conf/test/test_skip_bqsr.config' }
    skip_markduplicates        { includeConfig 'conf/test/test_skip_markduplicates.config' }
    split_fastq                { includeConfig 'conf/test/test_split_fastq.config' }
    targeted                   { includeConfig 'conf/test/test_targeted.config' }
    tools                      { includeConfig 'conf/test/test_tools.config' }
    tools_germline             { includeConfig 'conf/test/test_tools_germline.config' }
    tools_somatic              { includeConfig 'conf/test/test_tools_somatic.config' }
    tools_somatic_ascat        { includeConfig 'conf/test/test_tools_somatic_ascat.config' }
    tools_tumoronly            { includeConfig 'conf/test/test_tools_tumoronly.config' }
    trimming                   { includeConfig 'conf/test/test_trimming.config' }
    umi                        { includeConfig 'conf/test/test_umi.config' }
    use_gatk_spark             { includeConfig 'conf/test/test_use_gatk_spark.config' }
    variantcalling_channels    { includeConfig 'conf/test/test_variantcalling_channels.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-core/sarek'
    author          = 'Maxime Garcia, Szilveszter Juhos, Friederike Hanssen'
    homePage        = 'https://github.com/nf-core/sarek'
    description     = 'An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version = '3.1.1'
    doi             = '10.12688/f1000research.16665.2, 10.5281/zenodo.4063683'
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules/modules.config'

// Load more modules specific config for DSL2 module specific options

// prepare reference
includeConfig 'conf/modules/prepare_intervals.config'
includeConfig 'conf/modules/prepare_genome.config'

// preprocessing
includeConfig 'conf/modules/alignment_to_fastq.config'
includeConfig 'conf/modules/umi.config'
includeConfig 'conf/modules/trimming.config'
includeConfig 'conf/modules/aligner.config'
includeConfig 'conf/modules/markduplicates.config'
includeConfig 'conf/modules/prepare_recalibration.config'
includeConfig 'conf/modules/recalibrate.config'

// variant calling
includeConfig 'conf/modules/ascat.config'
includeConfig 'conf/modules/cnvkit.config'
includeConfig 'conf/modules/controlfreec.config'
includeConfig 'conf/modules/deepvariant.config'
includeConfig 'conf/modules/freebayes.config'
includeConfig 'conf/modules/haplotypecaller.config'
includeConfig 'conf/modules/manta.config'
includeConfig 'conf/modules/mpileup.config'
includeConfig 'conf/modules/msisensorpro.config'
includeConfig 'conf/modules/mutect2.config'
includeConfig 'conf/modules/strelka.config'
includeConfig 'conf/modules/tiddit.config'

//annotate
includeConfig 'conf/modules/annotate.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
