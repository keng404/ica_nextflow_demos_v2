if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test/test_full.config'
}
params.input = null // No default input  
params.step = 'mapping' // Starts with mapping  
params.genome = 'GATK.GRCh38'  
params.igenomes_base = 's3://ngi-igenomes/igenomes'  
params.save_reference = false // Built references not saved  
params.no_intervals = false // Intervals will be built from the fasta file  
params.nucleotides_per_second = 1000 // Default interval size  
params.tools = null // No default Variant_Calling or Annotation tools  
params.skip_tools = null // All tools  
params.split_fastq = 50000000 // FASTQ files will not be split by default by FASTP  
params.trim_fastq = false // No trimming  
params.clip_r1 = 0  
params.clip_r2 = 0  
params.three_prime_clip_r1 = 0  
params.three_prime_clip_r2 = 0  
params.trim_nextseq = 0  
params.save_trimmed = false  
params.save_split_fastqs = false  
params.umi_read_structure = null // no UMI  
params.group_by_umi_strategy = 'Adjacency' // default strategy when running with UMI for GROUPREADSBYUMI  
params.aligner = 'bwa-mem' // Default is bwa-mem, bwa-mem2 and dragmap can be used too  
params.use_gatk_spark = null // GATK Spark implementation of their tools in local mode not used by default  
params.save_mapped = false // Mapped BAMs not saved  
params.save_output_as_bam = false // Output files from preprocessing are saved as bam and not as cram files  
params.seq_center = null // No sequencing center to be written in read group CN field by aligner  
params.seq_platform = 'ILLUMINA' // Default platform written in read group PL field by aligner  
params.only_paired_variant_calling = false // if true, skips germline variant calling for normal-paired samples  
params.ascat_ploidy = null // default value for ASCAT  
params.ascat_min_base_qual = 20 // default value for ASCAT  
params.ascat_min_counts = 10 // default value for ASCAT  
params.ascat_min_map_qual = 35 // default value for ASCAT  
params.ascat_purity = null // default value for ASCAT  
params.cf_ploidy = "2" // default value for Control-FREEC  
params.cf_coeff = 0.05 // default value for Control-FREEC  
params.cf_contamination = 0 // default value for Control-FREEC  
params.cf_contamination_adjustment = false // by default we are not using this in Control-FREEC  
params.cf_mincov = 0 // ControlFreec default values  
params.cf_minqual = 0 // ControlFreec default values  
params.cf_window = null // by default we are not using this in Control-FREEC  
params.cnvkit_reference = null // by default the reference is build from the fasta file  
params.ignore_soft_clipped_bases = false // no --dont-use-soft-clipped-bases for GATK Mutect2  
params.wes = false // Set to true, if data is exome/targeted sequencing data. Used to use correct models in various variant callers  
params.joint_germline = false // g.vcf & joint germline calling are not run by default if HaplotypeCaller is selected  
params.vep_out_format = 'vcf'  
params.vep_dbnsfp = null // dbnsfp plugin disabled within VEP  
params.dbnsfp = null // No dbnsfp processed file  
params.dbnsfp_tbi = null // No dbnsfp processed file index  
params.dbnsfp_consequence = null // No default consequence for dbnsfp plugin  
params.dbnsfp_fields = "rs_dbSNP,HGVSc_VEP,HGVSp_VEP,1000Gp3_EAS_AF,1000Gp3_AMR_AF,LRT_score,GERP++_RS,gnomAD_exomes_AF" // Default fields for dbnsfp plugin  
params.vep_loftee = null // loftee plugin disabled within VEP  
params.vep_spliceai = null // spliceai plugin disabled within VEP  
params.spliceai_snv = null // No spliceai_snv file  
params.spliceai_snv_tbi = null // No spliceai_snv file index  
params.spliceai_indel = null // No spliceai_indel file  
params.spliceai_indel_tbi = null // No spliceai_indel file index  
params.vep_spliceregion = null // spliceregion plugin disabled within VEP  
params.snpeff_cache = null // No directory for snpEff cache  
params.vep_cache = null // No directory for VEP cache  
params.vep_include_fasta = false // Don't use fasta file for annotation with VEP  
params.multiqc_config = null  
params.multiqc_title = null  
params.multiqc_logo = null  
params.max_multiqc_email_size = '25.MB'  
params.multiqc_methods_description = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes,snpeff_version,vep_version,cf_ploidy'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.userEmulation = true  
params.genomes = [:]  
docker.enabled = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/sarek.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/sarek profiles: ${params.custom_config_base}/pipeline/sarek.config")
}
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules/modules.config'
includeConfig 'conf/modules/prepare_intervals.config'
includeConfig 'conf/modules/prepare_genome.config'
includeConfig 'conf/modules/alignment_to_fastq.config'
includeConfig 'conf/modules/umi.config'
includeConfig 'conf/modules/trimming.config'
includeConfig 'conf/modules/aligner.config'
includeConfig 'conf/modules/markduplicates.config'
includeConfig 'conf/modules/prepare_recalibration.config'
includeConfig 'conf/modules/recalibrate.config'
includeConfig 'conf/modules/ascat.config'
includeConfig 'conf/modules/cnvkit.config'
includeConfig 'conf/modules/controlfreec.config'
includeConfig 'conf/modules/deepvariant.config'
includeConfig 'conf/modules/freebayes.config'
includeConfig 'conf/modules/haplotypecaller.config'
includeConfig 'conf/modules/manta.config'
includeConfig 'conf/modules/mpileup.config'
includeConfig 'conf/modules/msisensorpro.config'
includeConfig 'conf/modules/mutect2.config'
includeConfig 'conf/modules/strelka.config'
includeConfig 'conf/modules/tiddit.config'
includeConfig 'conf/modules/annotate.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
