manifest {
    name            = 'nf-core/sarek'
    author          = 'Maxime Garcia, Szilveszter Juhos, Friederike Hanssen'
    homePage        = 'https://github.com/nf-core/sarek'
    description     = 'An open-source analysis pipeline to detect germline or somatic variants from whole genome or targeted sequencing'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version = '3.1.1'
    doi             = '10.12688/f1000research.16665.2, 10.5281/zenodo.4063683'
}
process {
	withName:'CUSTOM_DUMPSOFTWAREVERSIONS' {
	errorStrategy = 'ignore'
	}
}
process {
//   publishDir = [
//        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
//        mode: params.publish_dir_mode,
//        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
//    ]
    pod = [
        annotation: 'scheduler.illumina.com/presetSize',
        value: 'himem-small'
    ]    
    cpus = 7
    memory = '60 GB'
    maxForks =  5
//    errorStrategy  = 'ignore'
//    maxRetries = 3
//    errorStrategy = { sleep(task.attempt * 60000 as long); return 'retry' } // Retry with increasing delay
	 withLabel:process_single  {
	 cpus = {  check_max( 1 , 'cpus' )  }
	 memory = {  check_max( 6.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 4.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
	}

	 withLabel:process_low  {
	 cpus = {  check_max( 2 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 12.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 4.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
	}

	 withLabel:process_medium  {
	 cpus = {  check_max( 6 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 36.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 8.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withLabel:process_high  {
	 cpus = {  check_max( 12 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 72.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 16.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withLabel:process_long  {
	 time = {  check_max( 20.h * task.attempt, 'time' )  }
	}

	 withLabel:process_high_memory  {
	 memory = {  check_max( 200.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'himem-large' ]
	}

	 withLabel:error_ignore  {
	 errorStrategy = { 'ignore' }
	}

	 withLabel:error_retry  {
	 errorStrategy = { 'retry' }
	 maxRetries = { 2 }
	}

	 withName:'UNZIP.*|UNTAR.*|TABIX.*|BUILD_INTERVALS|CREATE_INTERVALS_BED|CUSTOM_DUMPSOFTWAREVERSIONS|VCFTOOLS|BCFTOOLS.*|SAMTOOLS_INDEX'  {
	 cpus = {  check_max( 1 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 1.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
	}

	 withName:'BWAMEM1_MEM|BWAMEM2_MEM'  {
	 cpus = {  check_max( 24 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 30.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withName:'GATK4_MARKDUPLICATES|GATK4_MARKDUPLICATESSPARK'  {
	 cpus = {  check_max( 6 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 30.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withName:MULTIQC  {
	 cpus = {  check_max( 4 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 12.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
	}

}
