if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.genome = null  
params.fai = null  
params.smrna_org = null  
params.save_index = false  
params.multiqc_config = null  
params.max_multiqc_email_size = '25.MB'  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.igenomes_base = 's3://ngi-igenomes/igenomes/'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = [:]  
params.config_profile_name = null  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes,smrna'  
params.adapter = "AGATCGGAAGAGC"  
params.move_umi = false  
params.deduplicate = true  
params.peakcaller = null  
params.segment = false  
params.half_window = 3  
params.merge_window = 3  
params.min_value = 10  
params.min_density_increase = 2  
params.max_cluster_length = 200  
params.pureclip_iv = 'all'  
params.pureclip_bc = 0  
params.pureclip_dm = 8  
params.bin_size_both = 3  
params.cluster_dist = 3  
params.motif = false  
params.motif_sample = 1000  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/smrna.config'
process.container = 'nfcore/clipseq:1.0.0'
includeConfig 'conf/base.ica.config'
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
