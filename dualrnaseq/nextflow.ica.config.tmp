if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.genome_host = false  
params.genome_pathogen = false  
params.input = "data/*{1,2}.fastq.gz"  
params.single_end = false  
params.run_cutadapt = false  
params.a = "AGATCGGAAGAGCACACGTCTGAACTCCAGTCA"  
params.A = "AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT"  
params.quality_cutoff = "10"  
params.cutadapt_params = ""  
params.run_bbduk = false  
params.minlen = "18"  
params.qtrim = "r"  
params.trimq = "10"  
params.ktrim = "r"  
params.k = "17"  
params.mink = "11"  
params.hdist = "1"  
params.adapters = "$projectDir/assets/adapters.fa"  
params.bbduk_params = ""  
params.skip_fastqc = false  
params.fastqc_params = ""  
params.libtype = ''  
params.generate_salmon_uniq_ambig = false  
params.incompatPrior = 0.0  
params.gene_attribute_gff_to_create_transcriptome_host = "transcript_id"  
params.gene_feature_gff_to_create_transcriptome_host = ["exon", "tRNA"]  
params.gene_attribute_gff_to_create_transcriptome_pathogen = "locus_tag"  
params.gene_feature_gff_to_create_transcriptome_pathogen = ["gene","sRNA","tRNA","rRNA"]  
params.read_transcriptome_fasta_host_from_file = false  
params.read_transcriptome_fasta_pathogen_from_file = false  
params.run_salmon_selective_alignment = false  
params.kmer_length = 21  
params.writeUnmappedNames = false  
params.softclipOverhangs = false  
params.dumpEq = false  
params.writeMappings = false  
params.keepDuplicates = false  
params.salmon_sa_params_index = ""  
params.salmon_sa_params_mapping = ""  
params.run_star = false  
params.outSAMunmapped = "Within"  
params.outSAMattributes = "Standard"  
params.outFilterMultimapNmax = 999  
params.outFilterType = "BySJout"  
params.alignSJoverhangMin = 8  
params.alignSJDBoverhangMin = 1  
params.outFilterMismatchNmax = 999  
params.outFilterMismatchNoverReadLmax = 1  
params.alignIntronMin = 20  
params.alignIntronMax = 1000000  
params.alignMatesGapMax = 1000000  
params.limitBAMsortRAM = 0  
params.winAnchorMultimapNmax = 999  
params.sjdbOverhang = 100  
params.outWigType = "None"  
params.outWigStrand = "Stranded"  
params.star_index_params = ""  
params.star_alignment_params = ""  
params.quantTranscriptomeBan = "Singleend"  
params.star_salmon_index_params = ""  
params.star_salmon_alignment_params = ""  
params.run_salmon_alignment_based_mode = false  
params.salmon_alignment_based_params = ""  
params.run_htseq_uniquely_mapped = false  
params.stranded = "yes"  
params.max_reads_in_buffer = 30000000  
params.minaqual = 10  
params.gene_feature_gff_to_quantify_host = ["exon","tRNA"]  
params.gene_feature_gff_to_quantify_pathogen = ["gene", "sRNA", "tRNA", "rRNA"]  
params.host_gff_attribute = "gene_id"  
params.pathogen_gff_attribute = "locus_tag"  
params.htseq_params = ""  
params.mapping_statistics = false  
params.rna_classes_to_replace_host = "$projectDir/data/RNA_classes_to_replace.tsv"  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = false  
params.config_profile_description = false  
params.config_profile_contact = false  
params.config_profile_url = false  
params.name = false  
params.multiqc_config = false  
params.max_multiqc_email_size = 25.MB  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.max_memory = 128.GB  
params.max_cpus = 16  
params.max_time = 240.h  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
workDir = "$projectDir/work"
process.container = 'nfcore/dualrnaseq:1.0.0'
includeConfig 'conf/base.ica.config'
genomes_ignore = false 
if (!params.genomes_ignore) {
  includeConfig 'conf/genomes.config'
}
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
//  includeConfig "${params.custom_config_base}/pipeline/dualrnaseq.config"
if (!params.genomes_ignore) {
  includeConfig 'conf/genomes.config'
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
