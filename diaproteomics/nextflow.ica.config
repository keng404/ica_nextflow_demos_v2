if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.irts = null  
params.input_sheet_dda = null  
params.generate_spectral_library = false  
params.merge_libraries = false  
params.align_libraries = false  
params.min_overlap_for_merging = 100  
params.generate_pseudo_irts = false  
params.irts_from_outer_quantiles = false  
params.n_irts = 250  
params.library_rt_fdr = 0.01  
params.unimod = "https://raw.githubusercontent.com/nf-core/test-datasets/diaproteomics/unimod.xml"  
params.skip_dia_processing = false  
params.skip_decoy_generation = false  
params.run_msstats = true  
params.mztab_export = false  
params.generate_plots = true  
params.irt_min_rsq = 0.95  
params.irt_alignment_method = 'lowess'  
params.irt_n_bins = 10  
params.irt_min_bins_covered = 8  
params.min_transitions = 6  
params.max_transitions = 6  
params.mz_extraction_window_ms1 = 10  
params.mz_extraction_window_ms1_unit = 'ppm'  
params.mz_extraction_window = 30  
params.mz_extraction_window_unit = 'ppm'  
params.rt_extraction_window = 600  
params.use_ms1 = true  
params.min_upper_edge_dist = 0.0  
params.pyprophet_classifier = 'LDA'  
params.pyprophet_fdr_ms_level = 'ms1ms2'  
params.pyprophet_global_fdr_level = 'protein'  
params.pyprophet_peakgroup_fdr = 0.01  
params.pyprophet_peptide_fdr = 0.01  
params.pyprophet_protein_fdr = 0.01  
params.pyprophet_pi0_start = 0.1  
params.pyprophet_pi0_end = 0.5  
params.pyprophet_pi0_steps = 0.05  
params.dialignr_global_align_fdr = 0.01  
params.dialignr_analyte_fdr = 0.01  
params.dialignr_unalign_fdr = 0.01  
params.dialignr_align_fdr = 0.05  
params.dialignr_query_fdr = 0.05  
params.dialignr_xicfilter = "sgolay"  
params.dialignr_parallelization = true  
params.decoy_method = 'shuffle'  
params.force_option = false  
params.cache_option = 'normal'  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = false  
params.config_profile_name = false  
params.config_profile_description = false  
params.config_profile_contact = false  
params.config_profile_url = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'input_paths'  
params.max_memory = 128.GB  
params.max_cpus = 16  
params.max_time = 240.h  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
process.container = 'nfcore/diaproteomics:1.2.4'
includeConfig 'conf/base.ica.config'
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
