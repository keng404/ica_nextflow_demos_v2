if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.genome = false  
params.input = 'data/*R1.fastq.gz'  
params.aligner = 'star'  
params.save_reference = false  
params.min_aln_length = 15  
params.save_trimmed = false  
params.trim_ecop = true  
params.trim_linker = true  
params.trim_5g = true  
params.trim_artifacts = false  
params.eco_site = 'CAGCAG'  
params.linker_seq = 'TCGTATGCCGTCTTC'  
params.artifacts_5end = "$projectDir/assets/artifacts_5end.fasta"  
params.artifacts_3end = "$projectDir/assets/artifacts_3end.fasta"  
params.skip_initial_fastqc = false  
params.skip_alignment = false  
params.skip_trimming = false  
params.skip_trimming_fastqc = false  
params.skip_samtools_stats = false  
params.skip_ctss_generation = false  
params.skip_ctss_qc = false  
params.remove_ribo_rna = false  
params.save_non_ribo_reads = false  
params.ribo_database_manifest = "$projectDir/assets/rrna-db-defaults.txt"  
params.bigwig = false  
params.min_cluster = 30  
params.tpm_cluster_threshold = 0.2  
params.name = false  
params.clusterOptions = false  
params.multiqc_config = false  
params.max_multiqc_email_size = 25.MB  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.igenomes_base = 's3://ngi-igenomes/igenomes/'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = false  
params.config_profile_description = false  
params.config_profile_contact = false  
params.config_profile_url = false  
params.max_memory = 128.GB  
params.max_cpus = 16  
params.max_time = 240.h  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
process.container = 'nfcore/cageseq:1.0.2'
includeConfig 'conf/base.ica.config'
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
