if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.extension = "/*_R{1,2}_001.fastq.gz"  
params.pacbio = false  
params.iontorrent = false  
params.FW_primer = null  
params.RV_primer = null  
params.classifier = null  
params.metadata = null  
params.trunc_qmin = 25  
params.trunc_rmin = 0.75  
params.trunclenf = null  
params.trunclenr = null  
params.max_ee = 2  
params.max_len = null  
params.min_len = 50  
params.metadata_category = null  
params.metadata_category_barplot = null  
params.double_primer = false  
params.retain_untrimmed = false  
params.cutadapt_min_overlap = 3  
params.cutadapt_max_error_rate = 0.1  
params.exclude_taxa = "mitochondria,chloroplast"  
params.min_frequency = 1  
params.min_samples = 1  
params.multiple_sequencing_runs = false  
params.single_end = false  
params.sample_inference = "independent"  
params.illumina_novaseq = false  
params.illumina_pe_its = false  
params.concatenate_reads = false  
params.cut_its = "none"  
params.its_partial = 0  
params.picrust = false  
params.sbdiexport = false  
params.addsh = false  
params.dada_tax_agglom_min = 2  
params.dada_tax_agglom_max = 7  
params.qiime_tax_agglom_min = 2  
params.qiime_tax_agglom_max = 6  
params.ignore_failed_trimming = false  
params.ignore_empty_input_files = false  
params.qiime_adonis_formula = null  
params.seed = 100  
params.filter_ssu = null  
params.min_len_asv = null  
params.max_len_asv = null  
params.skip_cutadapt = false  
params.skip_dada_quality = false  
params.skip_barrnap = false  
params.skip_qiime = false  
params.skip_fastqc = false  
params.skip_alpha_rarefaction = false  
params.skip_abundance_tables = false  
params.skip_barplot = false  
params.skip_taxonomy = false  
params.skip_dada_addspecies = false  
params.skip_diversity_indices = false  
params.skip_ancom = false  
params.skip_multiqc = false  
params.dada_ref_taxonomy = "silva=138"  
params.dada_assign_taxlevels = null  
params.dada_ref_tax_custom = null  
params.dada_ref_tax_custom_sp = null  
params.cut_dada_ref_taxonomy = false  
params.qiime_ref_taxonomy = null  
params.multiqc_config = null  
params.multiqc_title = null  
params.multiqc_logo = null  
params.max_multiqc_email_size = '25.MB'  
params.multiqc_methods_description = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'dada_ref_databases,qiime_ref_databases,igenomes_base'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
//   includeConfig "${params.custom_config_base}/pipeline/ampliseq.config"
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
includeConfig 'conf/ref_databases.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
