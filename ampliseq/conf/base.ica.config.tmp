manifest {
    name            = 'nf-core/ampliseq'
    author          = 'Daniel Straub, Alexander Peltzer'
    homePage        = 'https://github.com/nf-core/ampliseq'
    description     = 'Amplicon sequencing analysis workflow using DADA2 and QIIME2'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.10.3'
    version         = '2.4.1'
    doi             = '10.3389/fmicb.2020.550420'
}
process {
	withName:'CUSTOM_DUMPSOFTWAREVERSIONS' {
	errorStrategy = 'ignore'
	}
}
process {
//   publishDir = [
//        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
//        mode: params.publish_dir_mode,
//        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
//    ]
    pod = [
        annotation: 'scheduler.illumina.com/presetSize',
        value: 'himem-small'
    ]    
    cpus = 7
    memory = '60 GB'
    maxForks =  5
//    errorStrategy  = 'ignore'
//    maxRetries = 3
//    errorStrategy = { sleep(task.attempt * 60000 as long); return 'retry' } // Retry with increasing delay
	 withLabel:process_single  {
	 cpus = {  check_max( 1 , 'cpus' )  }
	 memory = {  check_max( 6.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 4.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
	}

	 withLabel:process_low  {
	 cpus = {  check_max( 2 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 12.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 6.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
	}

	 withLabel:process_medium  {
	 cpus = {  check_max( 6 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 42.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 12.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withLabel:process_high  {
	 cpus = {  check_max( 20 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 120.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 36.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'himem-large' ]
	}

	 withLabel:process_long  {
	 time = {  check_max( 48.h * task.attempt, 'time' )  }
	}

	 withLabel:single_cpu  {
	 cpus = {  check_max( 1 , 'cpus' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
	}

	 withLabel:process_high_memory  {
	 memory = {  check_max( 200.GB * task.attempt, 'memory' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'himem-large' ]
	}

	 withLabel:error_ignore  {
	 errorStrategy = { 'ignore' }
	}

	 withLabel:error_retry  {
	 errorStrategy = { 'retry' }
	 maxRetries = { 3 }
	}

	 withName:CUSTOM_DUMPSOFTWAREVERSIONS  {
	 cache =  false 
	}

}
