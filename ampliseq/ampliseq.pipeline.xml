<?xml version="1.0" encoding="utf-8"?>
<pipeline xmlns="xsd://www.illumina.com/ica/cp/pipelinedefinition" code="ampliseq pipeline" version="1.0">
  <dataInputs>
    <dataInput code="input_files" format="UNKNOWN" type="FILE" required="false" multiValue="true">
      <label>input_files</label>
      <description>input files for pipeline.
All files will be staged in workflow.launchDir</description>
    </dataInput>
    <dataInput code="project_dir" format="UNKNOWN" type="DIRECTORY" required="true" multiValue="true">
      <label>project_dir</label>
      <description>directory with additional files/input to run pipeline --- other files in your github project</description>
    </dataInput>
  </dataInputs>
  <steps>
    <step execution="MANDATORY" code="main_arguments">
      <label>main_arguments</label>
      <description>main_arguments parameters</description>
      <tool code="main_arguments parameters">
        <label>main_arguments</label>
        <description>main_arguments parameters</description>
        <parameter code="input" minValues="1" maxValues="1" classification="USER">
          <label>input</label>
          <description>Either a tab-separated sample sheet, a fasta file, or a folder containing zipped FastQ files
Points to the main pipeline input, one of the following:
- folder containing compressed fastq files
- sample sheet ending with .tsv that points towards compressed fastq files
- fasta file ending with .fasta, .fna or .fa that will be taxonomically classified

Related parameters are:
- --pacbio and --iontorrent if the sequencing data is PacBio data or IonTorrent data (default expected: paired-end Illumina data)
- --single_end if the sequencing data is single-ended Illumina data (default expected: paired-end Illumina data)
- --multiple_sequencing_runs (folder input only) if the sequencing data originates from multiple sequencing runs
- --extension (folder input only) if the sequencing file names do not follow the default (/-_R{1,2}_001.fastq.gz)
- --dada_ref_taxonomy and --qiime_ref_taxonomy to choose an appropriate reference taxonomy for the type of amplicon (16S/18S/ITS) (default: 16S rRNA sequence database)

##### Folder containing zipped FastQ files

For example:

bash
--input 'path/to/data'


Example for input data organization from one sequencing run with two samples, paired-end data:

bash
data
  ├─sample1_1_L001_R1_001.fastq.gz
  ├─sample1_1_L001_R2_001.fastq.gz
  ├─sample2_1_L001_R1_001.fastq.gz
  └─sample2_1_L001_R2_001.fastq.gz


Please note the following requirements:

1. The path must be enclosed in quotes
2. The folder must contain gzip compressed demultiplexed fastq files. If the file names do not follow the default (/-_R{1,2}_001.fastq.gz), please check --extension.
3. Sample identifiers are extracted from file names, i.e. the string before the first underscore _, these must be unique
4. If your data is scattered, produce a sample sheet
5. All sequencing data should originate from one sequencing run, because processing relies on run-specific error models that are unreliable when data from several sequencing runs are mixed. Sequencing data originating from multiple sequencing runs requires additionally the parameter --multiple_sequencing_runs and a specific folder structure.

##### Sample sheet

The sample sheet file is an alternative way to provide input reads, it must be a tab-separated file ending with .tsv that must have two to four columns with the following headers: 
- sampleID (required): Unique sample identifiers, any unique string (may not contain dots ., must not start with a number when using metadata)
- forwardReads (required): Paths to (forward) reads zipped FastQ files
- reverseReads (optional): Paths to reverse reads zipped FastQ files, required if the data is paired-end
- run (optional): If the data was produced by multiple sequencing runs, any string

For example:

bash
--input 'path/to/samplesheet.tsv'


##### Fasta file

When pointing at a file ending with .fasta, .fna or .fa, the containing sequences will be taxonomically classified. All other pipeline steps will be skipped.

This can be used to taxonomically classify previously produced ASV/OTU sequences.

For example:

bash
--input 'path/to/amplicon_sequences.fasta'</description>
          <stringType/>
          <value/>
        </parameter>
        <parameter code="outdir" minValues="1" maxValues="1" classification="USER">
          <label>outdir</label>
          <description>The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.</description>
          <stringType/>
          <value/>
        </parameter>
        <parameter code="config_profile_name" minValues="0" maxValues="1" classification="USER">
          <label>config_profile_name</label>
          <description>Configure params.config_profile_name</description>
          <stringType/>
          <value>'Full test profile'</value>
        </parameter>
        <parameter code="config_profile_description" minValues="0" maxValues="1" classification="USER">
          <label>config_profile_description</label>
          <description>Configure params.config_profile_description</description>
          <stringType/>
          <value>'Full test dataset to check pipeline function'</value>
        </parameter>
        <parameter code="FW_primer" minValues="0" maxValues="1" classification="USER">
          <label>FW_primer</label>
          <description>Configure params.FW_primer</description>
          <stringType/>
          <value>GTGYCAGCMGCCGCGGTAA</value>
        </parameter>
        <parameter code="RV_primer" minValues="0" maxValues="1" classification="USER">
          <label>RV_primer</label>
          <description>Configure params.RV_primer</description>
          <stringType/>
          <value>GGACTACNVGGGTWTCTAAT</value>
        </parameter>
        <parameter code="metadata" minValues="0" maxValues="1" classification="USER">
          <label>metadata</label>
          <description>Configure params.metadata</description>
          <stringType/>
          <value>https://raw.githubusercontent.com/nf-core/test-datasets/ampliseq/samplesheets/Metadata_full.tsv</value>
        </parameter>
        <parameter code="dada_ref_taxonomy" minValues="0" maxValues="1" classification="USER">
          <label>dada_ref_taxonomy</label>
          <description>Configure params.dada_ref_taxonomy</description>
          <stringType/>
          <value>rdp</value>
        </parameter>
        <parameter code="qiime_ref_taxonomy" minValues="0" maxValues="1" classification="USER">
          <label>qiime_ref_taxonomy</label>
          <description>Configure params.qiime_ref_taxonomy</description>
          <stringType/>
          <value>greengenes85</value>
        </parameter>
        <parameter code="trunc_qmin" minValues="0" maxValues="1" classification="USER">
          <label>trunc_qmin</label>
          <description>Configure params.trunc_qmin</description>
          <integerType/>
          <value>35</value>
        </parameter>
        <parameter code="min_samples" minValues="0" maxValues="1" classification="USER">
          <label>min_samples</label>
          <description>Configure params.min_samples</description>
          <integerType/>
          <value>3</value>
        </parameter>
        <parameter code="min_frequency" minValues="0" maxValues="1" classification="USER">
          <label>min_frequency</label>
          <description>Configure params.min_frequency</description>
          <integerType/>
          <value>30</value>
        </parameter>
        <parameter code="metadata_category_barplot" minValues="0" maxValues="1" classification="USER">
          <label>metadata_category_barplot</label>
          <description>Configure params.metadata_category_barplot</description>
          <stringType/>
          <value>habitat</value>
        </parameter>
        <parameter code="picrust" minValues="0" maxValues="1" classification="USER">
          <label>picrust</label>
          <description>Configure params.picrust</description>
          <booleanType/>
          <value>true</value>
        </parameter>
        <parameter code="qiime_adonis_formula" minValues="0" maxValues="1" classification="USER">
          <label>qiime_adonis_formula</label>
          <description>Configure params.qiime_adonis_formula</description>
          <stringType/>
          <value>habitat</value>
        </parameter>
        <parameter code="ica_smoke_test" minValues="0" maxValues="1" classification="USER">
          <label>ica_smoke_test</label>
          <description>Boolean to trigger smoke test:</description>
          <booleanType/>
          <value>false</value>
        </parameter>
      </tool>
    </step>
  </steps>
</pipeline>
