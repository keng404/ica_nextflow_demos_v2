if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null // sample sheet  
params.genome = 'GRCh38'  
params.igenomes_base = 's3://ngi-igenomes/igenomes'  
params.save_reference = false  
params.save_merged_fastq = false  
params.read_length = 150 // Required for STAR to build index and align reads  
params.aligner = 'star' // Only STAR is currently supported.  
params.star_twopass = true  
params.star_ignore_sjdbgtf = false // Ignore GTF file while creating index or alignment by STAR  
params.star_max_memory_bamsort = 0 // STAR parameter limitBAMsortRAM to specify maximum RAM for sorting BAM  
params.star_bins_bamsort = 50 // STAR parameter outBAMsortingBinsN to specify number of bins for sorting BAM  
params.star_max_collapsed_junc = 1000000 // STAR parameter limitOutSJcollapsed to specify max number of collapsed junctions  
params.seq_center = null  
params.seq_platform = 'illumina' // Required for preparing for BAM headers for GATK to work  
params.bam_csi_index = false  
params.save_unaligned = false  
params.save_align_intermeds = false  
params.remove_duplicates = false  
params.no_intervals = false  
params.annotate_tools = null // List of annotation tools to run - snpeff or vep or merge  
params.annotation_cache = false // Annotation cache disabled  
params.cadd_cache = null // CADD cache disabled  
params.cadd_indels = null // No CADD InDels file  
params.cadd_indels_tbi = null // No CADD InDels index  
params.cadd_wg_snvs = null // No CADD SNVs file  
params.cadd_wg_snvs_tbi = null // No CADD SNVs index  
params.genesplicer = null // genesplicer disabled within VEP  
params.snpeff_cache = null // No directory for snpEff cache  
params.snpeff_db = null // No default db for snpeff  
params.vep_cache = null // No directory for VEP cache  
params.vep_genome = null // No default genome for VEP  
params.vep_cache_version = null // No default cache version for VEP  
params.skip_baserecalibration = false  
params.skip_intervallisttools = false  
params.skip_variantfiltration = false  
params.skip_variantannotation = false  
params.gatk_interval_scatter_count = 25  
params.gatk_hc_call_conf = 20  
params.gatk_vf_window_size = 35  
params.gatk_vf_cluster_size = 3  
params.gatk_vf_fs_filter = 30.0  
params.gatk_vf_qd_filter = 2.0  
params.skip_multiqc = false  
params.multiqc_config = null  
params.multiqc_title = null  
params.max_multiqc_email_size = '25.MB'  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/rnavar.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/rnavar profiles: ${params.custom_config_base}/pipeline/rnavar.config")
}
//   includeConfig "${params.custom_config_base}/pipeline/rnavar.config"
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
