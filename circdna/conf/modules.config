/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Input Preparation options
//
process {
    withName: 'CAT_FASTQ' {
        publishDir = [
            path: { "${params.outdir}/fastq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_merged_fastq
        ]
    }
}

//
// Genome Preparation
//
process {
    withName: 'BWA_INDEX' {
        publishDir = [
            path: { "${params.outdir}/genome/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

}

//
// Quality Control options
//
if(!params.skip_qc) {
    process {
        withName: 'FASTQC' {
            ext.args = "--quiet"
            publishDir = [
                    path: { "${params.outdir}/reports/fastqc" },
                    mode: params.publish_dir_mode,
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    pattern: "*.{html,zip}"
                ]
        }
    }
}

//
// Trimming options
//
if (!params.skip_trimming) {
    process {
        withName: 'TRIMGALORE' {
            ext.prefix = { "${meta.id}.trimmed" }
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/reports/trimgalore_fastqc" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{html,zip}",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.fq.gz",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/trimgalore" },
                    mode: params.publish_dir_mode,
                    pattern: "*.txt",
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ]
            ]
        }
    }
}

//
// Alignment options
//
process {
    withName: 'BWA_MEM' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/bwa" },
            enabled: true,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.bam"
        ]
    }
    withName: 'SAMTOOLS_INDEX_BAM' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/bwa" },
            enabled: true,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.bai"
        ]
    }
    withName: 'SAMTOOLS_SORT_BAM' {
        ext.args = ""
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/bwa" },
            enabled: params.save_sorted_bam,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*sorted.bam"
        ]
    }
}

process {
    withName: '.*:BAM_STATS_SAMTOOLS_RAW:.*' {
        publishDir = [
            path: { "${params.outdir}/reports/samtools_stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
}

//
// Picard MarkDuplicates and Filtering options
//
if (!params.skip_markduplicates) {
    process {
        withName: '.*:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
            ext.args   = 'ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp'
            ext.prefix = { "${meta.id}.md" }
            publishDir = [
                [
                    path: { "${params.outdir}/reports/markduplicates" },
                    mode: params.publish_dir_mode,
                    pattern: '*metrics.txt',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
                ],
                [
                    path: { "${params.outdir}/markduplicates/bam" },
                    mode: params.publish_dir_mode,
                    pattern: '*.md.{bam,bai}',
                    saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                    enable: params.save_markduplicates_bam
                ]
            ]
        }

        withName: '.*:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
            ext.prefix = { "${meta.id}.markdup.sorted" }
            publishDir = [
                path: { "${params.outdir}/bwa" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: '*.{bai,csi}'
            ]
        }

        withName: '.*:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/reports/samtools_stats/${meta.id}/md/" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: '*.{stats,flagstat,idxstats}'
            ]
        }
        withName: 'SAMTOOLS_VIEW_FILTER' {
            if (params.keep_duplicates) {
                ext.args = ''
            } else {
                ext.args = '-F 0x0400'
            }
            ext.prefix = { "${meta.id}.md.filtered" }
            publishDir = [
                path: { "${params.outdir}/markduplicates/duplicates_removed" },
                mode: params.publish_dir_mode,
                pattern: '*filtered.{bai,bam}',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: 'SAMTOOLS_SORT_FILTERED' {
            ext.args = ""
            ext.prefix = { "${meta.id}.md.filtered.sorted" }
            publishDir = [
                path: { "${params.outdir}/markduplicates/duplicates_removed" },
                mode: params.publish_dir_mode,
                pattern: '*filtered.sorted.bam',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

        withName: 'SAMTOOLS_INDEX_FILTERED' {
            ext.args = ""
            ext.prefix = { "${meta.id}.md.filtered.sorted" }
            publishDir = [
                path: { "${params.outdir}/markduplicates/duplicates_removed" },
                mode: params.publish_dir_mode,
                pattern: '*filtered.sorted.bai',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

    }
}

if ("circle_finder" in params.circle_identifier.split(",")) {
    process {
        withName: 'BEDTOOLS_SORTEDBAM2BED' {
            ext.args = "-cigar"
        }
        withName: 'BEDTOOLS_SPLITBAM2BED' {
            ext.args = "-cigar"
        }
        withName: 'SAMTOOLS_SORT_QNAME_CF' {
            ext.prefix = { "${meta.id}.qname.sorted" }
            ext.args = "-n"
            publishDir = [
                path: { "${params.outdir}/circlefinder/samtools" },
                mode: params.publish_dir_mode,
                pattern: '*filtered.sorted.bai',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }

    }
}

if ("circle_finder" in params.circle_identifier.split(",")) {
    process {
        withName: 'BEDTOOLS_SORTEDBAM2BED' {
            ext.args = "-cigar"
        }
        withName: 'BEDTOOLS_SPLITBAM2BED' {
            ext.args = "-cigar"
        }
        withName: 'SAMTOOLS_SORT_QNAME_CF' {
            ext.prefix = { "${meta.id}.qname.sorted" }
            ext.args = "-n"
            publishDir = [
                path: { "${params.outdir}/circlefinder/samtools" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: 'CIRCLEFINDER' {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/circlefinder" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: 'SAMBLASTER' {
            ext.args = "--ignoreUnmated"
            publishDir = [
                path: { "${params.outdir}/circlefinder/samblaster" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
    }
}

if ("circexplorer2" in params.circle_identifier.split(",")) {
    process {
        withName: 'CIRCEXPLORER2_PARSE' {
            ext.args = "-t BWA"
            publishDir = [
                path: { "${params.outdir}/circexplorer2" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

process {
    withName: 'CNVKIT_BATCH' {
        ext.args = "--method wgs"
        publishDir = [
            path: { "${params.outdir}/ampliconarchitect/cnvkit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: 'CNVKIT_SEGMENT' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/ampliconarchitect/cnvkit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'COLLECT_SEEDS' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/ampliconarchitect/cnvkit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'AMPLIFIED_INTERVALS' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/ampliconarchitect/cnvkit" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'AMPLICONARCHITECT_AMPLICONARCHITECT' {
        time        = '96.h'
        ext.args = ""
        publishDir = [
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/sv_view" },
                mode: params.publish_dir_mode,
                pattern: '*.{png,pdf}',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/amplicons" },
                mode: params.publish_dir_mode,
                pattern: '*{graph.txt,cycles.txt}',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/logs" },
                mode: params.publish_dir_mode,
                pattern: '*logs.txt',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/cnseg" },
                mode: params.publish_dir_mode,
                pattern: '*cnseg.txt',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconarchitect/summary" },
                mode: params.publish_dir_mode,
                pattern: '*summary.txt',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],

        ]
    }
    withName: 'AMPLICONARCHITECT_AMPLICONCLASSIFIER' {
        ext.args = "--annotate_cycles_file --report_complexity --verbose_classification --plotstyle 'individual'"
        publishDir = [
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.input',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*amplicon_classification_profiles.tsv',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*ecDNA_counts.tsv',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*gene_list.tsv',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}/bed" },
                mode: params.publish_dir_mode,
                pattern: '*.bed',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}/annotated_cycles" },
                mode: params.publish_dir_mode,
                pattern: '*annotated_cycles.txt',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}/radar" },
                mode: params.publish_dir_mode,
                pattern: '*class_radar.{png,pdf}',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*_feature_entropy.tsv',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/${meta.id}" },
                mode: params.publish_dir_mode,
                pattern: '*edge_classification_profiles.tsv',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        ]
    }
    withName: 'AMPLICONARCHITECT_AMPLICONSIMILARITY' {
        ext.args = ""
        publishDir = [
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/input" },
                mode: params.publish_dir_mode,
                pattern: '*.input',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ],
            [
                path: { "${params.outdir}/ampliconarchitect/ampliconclassifier/similarity" },
                mode: params.publish_dir_mode,
                pattern: '*_similarity_scores.tsv',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ],
        ]
    }
    withName: 'SUMMARISE_AA' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/ampliconarchitect/summary" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

if ("unicycler" in params.circle_identifier.split(",")) {
    process {
        withName: 'UNICYCLER' {
            time        = '96.h'
            ext.args = "--no_rotate"
            publishDir = [
                path: { "${params.outdir}/unicycler" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: 'SEQTK_SEQ' {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: 'SEQTK_SEQ' {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: false
            ]
        }
        withName: 'GETCIRCULARREADS' {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler/getcircularreads" },
                mode: params.publish_dir_mode,
                pattern: '*.unicycler.circular.fastq.gz',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
        withName: 'MINIMAP2_ALIGN' {
            ext.args = ""
            publishDir = [
                path: { "${params.outdir}/unicycler/minimap2" },
                mode: params.publish_dir_mode,
                pattern: '*.paf',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: true
            ]
        }
    }
}

//
// Circle-Map Realign & Repeats
//
process {
    withName: 'SAMTOOLS_SORT_QNAME_CM' {
        ext.prefix = { "${meta.id}.qname.sorted" }
        ext.args = "-n"
        publishDir = [
            path: { "${params.outdir}/circlemap/samtools" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: 'CIRCLEMAP_READEXTRACTOR' {
        ext.prefix = { "${meta.id}.qname.sorted" }
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/circlemap/readextractor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'SAMTOOLS_SORT_RE' {
        ext.prefix = { "${meta.id}.circular_read_candidates_sorted" }
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/circlemap/readextractor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }
    withName: 'SAMTOOLS_INDEX_RE' {
        ext.prefix = { "${meta.id}.circular_read_candidates_sorted" }
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/circlemap/readextractor" },
            mode: params.publish_dir_mode,
            pattern: '*.{bam,bai}',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false,
        ]
    }
    withName: 'CIRCLEMAP_REALIGN' {
        ext.args = ""
        time = '96.h'
        publishDir = [
            path: { "${params.outdir}/circlemap/realign" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
    withName: 'CIRCLEMAP_REPEATS' {
        ext.args = ""
        publishDir = [
            path: { "${params.outdir}/circlemap/repeats" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }
}

if (!params.skip_multiqc) {
    process {
        withName: 'MULTIQC' {
            ext.args   = params.multiqc_title ? "--title \"$params.multiqc_title\"" : ''
            publishDir = [
                path: { [
                    "${params.outdir}/multiqc"
                    ].join('') },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
