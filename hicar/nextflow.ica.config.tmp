if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.method = 'HiCAR'  
params.anchor_peaks = null  
params.genome = null  
params.igenomes_base = 's3://ngi-igenomes/igenomes'  
params.ucscname = null  
params.mappability = null  
params.blacklist = null  
params.skip_cutadapt = false  
params.enzyme = 'CviQI'  
params.restriction_sites = '^TAC'  
params.restriction_sites_cut_off = 0.5  
params.shiftsize = -75  
params.smooth_window = 150  
params.qval_thresh = 0.01  
params.high_resolution_R1 = false  
params.r1_pval_thresh = 0.1  
params.remove_dup = false  
params.snow_type = "SOCK"  
params.peak_pair_block = 1e8  
params.skip_peak_qc = false  
params.skip_peak_annotation = false  
params.skip_diff_analysis = false  
params.enrichment_fdr = 0.05  
params.cool_bin = '5000_10000'  
params.maps_digest_file = null  
params.maps_cutoff_counts = 12  
params.maps_cutoff_fold_change = 2  
params.maps_cutoff_fdr = 2  
params.maps_filter = 'None'  
params.maps_model = 'pospoisson'  
params.merge_map_py_source = 'https://raw.githubusercontent.com/ijuric/MAPS/91c9c360092b25a217d91b9ea07eba5dd2ac72f4/bin/utils/genomic_features_generator/scripts/merge_map.py'  
params.feature_frag2bin_source = 'https://raw.githubusercontent.com/ijuric/MAPS/91c9c360092b25a217d91b9ea07eba5dd2ac72f4/bin/utils/genomic_features_generator/scripts/feature_frag2bin.py'  
params.make_maps_runfile_source = 'https://raw.githubusercontent.com/ijuric/MAPS/18c1a337f222130d7c5735d051614e2a253d5319/bin/MAPS/make_maps_runfile.py'  
params.skip_fastqc = false  
params.skip_plot_profile = false  
params.skip_igv = false  
params.skip_multiqc = false  
params.skip_trackhub = false  
params.skip_enrichment = true  
params.virtual_4c = false  
params.v4c_max_events = 25  
params.multiqc_config = null  
params.multiqc_title = null  
params.max_multiqc_email_size = '25.MB'  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '156.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
params.juicer_jvm_params = '-Xms512m -Xmx4096m'  
params.juicer_tools_jar = 'https://github.com/aidenlab/Juicebox/releases/download/v2.13.06/juicer_tools_2.13.06.jar'  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
//   includeConfig "${params.custom_config_base}/pipeline/hicar.config"
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
