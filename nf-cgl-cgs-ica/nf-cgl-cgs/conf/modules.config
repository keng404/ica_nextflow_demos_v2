/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: 'CONVERT_XLSX_TO_CSV' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'CREATE_DEMULTIPLEX_SAMPLESHEET' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'DRAGEN_DEMULTIPLEX' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
        publishDir = [
            path: { "${params.demux_outdir}/${task.ext.prefix.id}/" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename ->
                    filename.equals('versions.yml')     ? null :
                    filename.endsWith('fastq_list.csv') ? null :
                    filename.split('/')[1]
            },
            enabled: params.demux_outdir ? true : false
        ]
    }

    withName: 'DRAGEN_ALIGN' {
        publishDir = [
            [
                path: { "${params.outdir}/DRAGEN_output/${meta.id}/" },
                mode: params.publish_dir_mode,
                saveAs: { filename ->
                    def patterns = [
                        '.bw',
                        '.bam',
                        '.gff3',
                        'cov.csv',
                        'hist.csv',
                        '_usage.txt',
                        'replay.json',
                        '.targeted.json',
                        '.cnv_sv.vcf.gz',
                        '.gc_metrics.csv',
                        '.repeats.vcf.gz',
                        '.roh_metrics.csv',
                        /.*\w{4}_metrics\.csv/,
                        '.cnv.excluded_intervals.bed.gz'
                    ]
                    def jointGenotypePatterns = [
                        sv: ['.sv.vcf.gz', 'sv_metrics.csv'],
                        cnv: ['.cnv.vcf.gz', 'cnv_metrics.csv'],
                        small_variants: ["${meta.id}.vcf.gz", '.hard-filtered.vcf.gz', 'vc_metrics.csv']
                    ]

                    if (patterns.any { filename.contains(it) || filename.matches(it) }) {
                        return filename.split('/')[1]
                    }

                    if (!params.joint_genotype_sv && jointGenotypePatterns.sv.any { filename.contains(it) || filename.endsWith(it) }) {
                        return filename.split('/')[1]
                    }

                    if (!params.joint_genotype_cnv && jointGenotypePatterns.cnv.any { filename.contains(it) || filename.endsWith(it) }) {
                        return filename.split('/')[1]
                    }

                    if (!params.joint_genotype_small_variants && jointGenotypePatterns.small_variants.any { filename.contains(it) || filename.endsWith(it) }) {
                        return filename.split('/')[1]
                    }

                    return null
                }
            ]
        ]
    }

    withName: 'DRAGEN_JOINT_CNV' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'DRAGEN_JOINT_SMALL_VARIANTS' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'DRAGEN_JOINT_SV' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
    }

    withName: 'PARSE_QC_METRICS' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
        publishDir = [
            [
                path: { "${params.outdir}/QC_metrics/" },
                mode: params.publish_dir_mode,
                pattern: "*.xlsx"
            ],
            [
                path: { "${params.outdir}/DRAGEN_output/" },
                mode: params.publish_dir_mode,
                pattern: "*_Genoox.xlsx"
            ],
            [
                path: { "${params.qc_outdir}/${task.ext.prefix.id}/QC_metrics/" },
                mode: params.publish_dir_mode,
                pattern: "*.xlsx",
                enabled: params.qc_outdir ? true : false
            ]
        ]
    }

    withName: 'BCFTOOLS_SPLIT_VCF' {
        publishDir = [
            path: { "${params.outdir}/DRAGEN_output/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.vcf.gz*'
        ]
    }

    withName: 'TRANSFER_DATA_AWS' {
        ext.prefix = [ 'id': params.batch_name ?: new java.util.Date().format('yyyyMMdd') + '_CGS' ]
        publishDir = [
            path: { "${params.outdir}/pipeline_info/" },
            mode: params.publish_dir_mode,
            pattern: 'aws_log.txt'
        ]
    }

}
