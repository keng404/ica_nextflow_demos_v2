if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.batch_name = null  
params.fastq_list = null  
params.sample_info = null  
params.illumina_rundir = null  
params.transfer_data = true  
params.qc_outdir = '/storage1/fs1/gtac-mgi/Active/CLE/assay/CGS/batchdir'  
params.demux_outdir = '/storage1/fs1/gtac-mgi/Active/CLE/assay/CGS/demux_fastq'  
params.host = "compute1-exec-235"  
params.queue = 'pathology'  
params.user_group = 'compute-gtac-mgi'  
params.job_group_name = null  
params.create_gvcf = true  
params.refdir = '/storage1/fs1/duncavagee/Active/SEQ/reference/dragen_hg38_multigenome_v4.3.6'  
params.dbsnp = '/storage1/fs1/duncavagee/Active/SEQ/reference/dragen_align_inputs/hg38/dbsnp.vcf.gz'  
params.adapter1 = '/storage1/fs1/duncavagee/Active/SEQ/reference/dragen_align_inputs/hg38/dragen_adapter1.fa'  
params.adapter2 = '/storage1/fs1/duncavagee/Active/SEQ/reference/dragen_align_inputs/hg38/dragen_adapter2.fa'  
params.intermediate_dir = '/staging/intermediate-results-dir'  
params.qc_coverage_region = '/storage1/fs1/duncavagee/Active/SEQ/reference/qc_regions/hglft_genome_bbd5_b7c870_hg38.bed'  
params.qc_cross_contamination = '/opt/dragen/4.3.6/resources/qc/sample_cross_contamination_resource_hg38.vcf.gz'  
params.joint_genotype_sv = false  
params.joint_genotype_cnv = false  
params.joint_genotype_small_variants = true  
params.genome = null  
params.igenomes_base = 's3://ngi-igenomes/igenomes/'  
params.fasta = null  
params.multiqc_config = null  
params.multiqc_title = null  
params.multiqc_logo = null  
params.max_multiqc_email_size = '25.MB'  
params.multiqc_methods_description = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'  
params.monochromeLogs = null // TODO remove when nf-core fixes nf-validation bug  
params.config_profile_name = null  
params.config_profile_description = null  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_contact = null  
params.config_profile_url = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
params.validationFailUnrecognisedParams = false  
params.validationLenientMode = false  
params.validationSchemaIgnoreParams = 'genomes,igenomes_base,monochromeLogs'  
params.validationShowHiddenParams = false  
params.validate_params = true  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
def lsf_host       = params.host           ? "-m ${params.host}"           : ""
def lsf_queue      = params.queue          ? "-q ${params.queue}"          : ""
def lsf_user_group = params.user_group     ? "-G ${params.user_group}"     : ""
def lsf_group_name = params.job_group_name ? "-g ${params.job_group_name}" : ""
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/nf-cgl-cgs profiles: ${params.custom_config_base}/nfcore_custom.config")
}
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
    id 'nf-amazon'
}
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
nextflow.enable.configProcessNamesValidation = false
def trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
