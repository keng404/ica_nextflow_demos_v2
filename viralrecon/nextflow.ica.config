if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.platform = null  
params.protocol = null  
params.genome = null  
params.primer_set = null  
params.primer_set_version = null  
params.primer_fasta = null  
params.primer_left_suffix = '_LEFT'  
params.primer_right_suffix = '_RIGHT'  
params.save_reference = false  
params.fastq_dir = null  
params.fast5_dir = null  
params.sequencing_summary = null  
params.min_barcode_reads = 100  
params.min_guppyplex_reads = 10  
params.artic_minion_caller = 'nanopolish'  
params.artic_minion_aligner = 'minimap2'  
params.artic_minion_medaka_model = null  
params.skip_pycoqc = false  
params.skip_nanoplot = false  
params.asciigenome_read_depth = 50  
params.asciigenome_window_size = 50  
params.multiqc_title = null  
params.multiqc_config = null  
params.max_multiqc_email_size = '25.MB'  
params.skip_mosdepth = false  
params.skip_pangolin = false  
params.skip_nextclade = false  
params.skip_variants_quast = false  
params.skip_snpeff = false  
params.skip_asciigenome = false  
params.skip_variants_long_table = false  
params.skip_multiqc = false  
params.kraken2_db = 's3://nf-core-awsmegatests/viralrecon/input_data/kraken2_human.tar.gz'  
params.kraken2_db_name = 'human'  
params.kraken2_variants_host_filter = false  
params.kraken2_assembly_host_filter = true  
params.save_trimmed_fail = false  
params.skip_fastqc = false  
params.skip_kraken2 = false  
params.skip_fastp = false  
params.skip_cutadapt = false  
params.variant_caller = null  
params.consensus_caller = 'bcftools'  
params.min_mapped_reads = 1000  
params.ivar_trim_noprimer = false  
params.ivar_trim_offset = null  
params.filter_duplicates = false  
params.save_unaligned = false  
params.save_mpileup = false  
params.skip_ivar_trim = false  
params.skip_markduplicates = true  
params.skip_picard_metrics = false  
params.skip_consensus_plots = false  
params.skip_consensus = false  
params.skip_variants = false  
params.assemblers = 'spades'  
params.spades_mode = 'rnaviral'  
params.spades_hmm = null  
params.blast_db = null  
params.skip_bandage = false  
params.skip_blast = false  
params.skip_abacas = false  
params.skip_plasmidid = false  
params.skip_assembly_quast = false  
params.skip_assembly = false  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes,igenomes_base'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/viralrecon.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/viralrecon profiles: ${params.custom_config_base}/pipeline/viralrecon.config")
}
conda { createTimeout = "120 min" }
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
