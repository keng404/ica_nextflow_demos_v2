manifest {
  name = 'nf-core/proteomicslfq'
  author = 'Julianus Pfeuffer, Lukas Heumos, Leon Bichmann, Timo Sachsenberg, Yasset Perez-Riverol'
  homePage = 'https://github.com/nf-core/proteomicslfq'
  description = 'Proteomics label-free quantification (LFQ) analysis pipeline using OpenMS and MSstats, with feature quantification, feature summarization, quality control and group-based statistical analysis.'
  mainScript = 'main.nf'
  nextflowVersion = '!>=20.01.0'
  version = '1.0.0'
}
process {
	withName:'CUSTOM_DUMPSOFTWAREVERSIONS' {
	errorStrategy = 'ignore'
	}
}
process {
//   publishDir = [
//        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
//        mode: params.publish_dir_mode,
//        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
//    ]
    pod = [
        annotation: 'scheduler.illumina.com/presetSize',
        value: 'himem-small'
    ]    
    cpus = 7
    memory = '60 GB'
    maxForks =  5
//    errorStrategy  = 'ignore'
//    maxRetries = 3
//    errorStrategy = { sleep(task.attempt * 60000 as long); return 'retry' } // Retry with increasing delay
	 withLabel:process_very_low  {
	 cpus = {  check_max( 2 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 6.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 3.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-medium' ]
	}

	 withLabel:process_low  {
	 cpus = {  check_max( 4 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 10.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 6.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-large' ]
	}

	 withLabel:process_medium  {
	 cpus = {  check_max( 8 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 32.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 8.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-xlarge' ]
	}

	 withLabel:process_high  {
	 cpus = {  check_max( 12 * task.attempt, 'cpus' )  }
	 memory = {  check_max( 64.GB * task.attempt, 'memory' )  }
	 time = {  check_max( 10.h * task.attempt, 'time' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-2xlarge' ]
	}

	 withLabel:process_long  {
	 time = {  check_max( 20.h * task.attempt, 'time' )  }
	}

	 withLabel:process_single_thread  {
	 cpus = {  check_max( 1 * task.attempt, 'cpus' )  }
	 pod = [ annotation: 'scheduler.illumina.com/presetSize' , value: 'standard-small' ]
	}

	 withName:get_software_versions  {
	 cache =  false 
	}

}
