if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = '' // the sdrf and spectra parameters are inferred from this one  
params.root_folder = ''  
params.local_input_type = ''  
params.database = ''  
params.expdesign = ''  
params.posterior_probabilities = 'percolator'  
params.add_decoys = false  
params.search_engines = 'comet'  
params.protein_inference = 'aggregation'  
params.psm_pep_fdr_cutoff = 0.10  
params.protein_level_fdr_cutoff = 0.05  
params.decoy_affix = 'DECOY_'  
params.affix_type = 'prefix'  
params.openms_peakpicking = false  
params.peakpicking_inmemory = false  
params.peakpicking_ms_levels = '' // means all/auto  
params.pp_debug = 0  
params.enzyme = 'Trypsin'  
params.num_enzyme_termini = 'fully'  
params.allowed_missed_cleavages = 2  
params.precursor_mass_tolerance = 5  
params.precursor_mass_tolerance_unit = 'ppm'  
params.fixed_mods = 'Carbamidomethyl  
params.variable_mods = 'Oxidation  
params.enable_mod_localization = false  
params.mod_localization = 'Phospho  
params.fragment_mass_tolerance = 0.03  
params.fragment_mass_tolerance_unit = 'Da'  
params.fragment_method = 'HCD' //currently unused. hard to find a good logic to beat the defaults  
params.isotope_error_range = '0,1'  
params.instrument = '' //auto-determined from tolerances  
params.protocol = 'automatic'  
params.min_precursor_charge = 2  
params.max_precursor_charge = 4  
params.min_peptide_length = 6  
params.max_peptide_length = 40  
params.num_hits = 1  
params.max_mods = 3  
params.db_debug = 0  
params.IL_equivalent = true  
params.allow_unmatched = false  
params.outlier_handling = "none"  
params.train_FDR = 0.05  
params.test_FDR = 0.05  
params.FDR_level = 'peptide-level-fdrs'  
params.klammer = false  
params.description_correct_features = 0  
params.subset_max_train = 300000  
params.consensusid_algorithm = 'best'  
params.min_consensus_support = 0  
params.consensusid_considered_top_hits = 0  
params.luciphor_neutral_losses = ''  
params.luciphor_decoy_mass = ''  
params.luciphor_decoy_neutral_losses = ''  
params.luciphor_debug = 0  
params.inf_quant_debug = 0  
params.protein_quant = 'unique_peptides'  
params.quantification_method = 'feature_intensity'  
params.targeted_only = 'true'  
params.mass_recalibration = 'false'  
params.transfer_ids = 'false'  
params.skip_post_msstats = false  
params.ref_condition = ''  
params.contrasts = ''  
params.enable_qc = false  
params.ptxqc_report_layout = ''  
params.name = false  
params.max_multiqc_email_size = 25.MB  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = false  
params.config_profile_description = false  
params.config_profile_contact = false  
params.config_profile_url = false  
params.max_memory = 128.GB  
params.max_cpus = 16  
params.max_time = 240.h  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
process.container = 'nfcore/proteomicslfq:1.0.0'
includeConfig 'conf/base.ica.config'
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
