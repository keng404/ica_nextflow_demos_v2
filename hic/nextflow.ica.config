if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.genome = false  
params.input = null  
params.input_paths = false  
params.chromosome_size = false  
params.restriction_fragments = false  
params.save_reference = false  
params.split_fastq = false  
params.fastq_chunks_size = 20000000  
params.save_interaction_bam = false  
params.save_aligned_intermediates = false  
params.bwt2_opts_end2end = '--very-sensitive -L 30 --score-min L,-0.6,-0.2 --end-to-end --reorder'  
params.bwt2_opts_trimmed = '--very-sensitive -L 20 --score-min L,-0.6,-0.2 --end-to-end --reorder'  
params.keep_dups = false  
params.keep_multi = false  
params.min_mapq = 10  
params.digestion = false  
params.digest['hindiii'].restriction_site = 'A^AGCTT'  
params.digest = [:]  
params.digest['hindiii'] = [:]  
params.digest['hindiii'].ligation_site = 'AAGCTAGCTT'  
params.digest['mboi'].restriction_site = '^GATC'  
params.digest['mboi'] = [:]  
params.digest['mboi'].ligation_site = 'GATCGATC'  
params.digest['dpnii'].restriction_site = '^GATC'  
params.digest['dpnii'] = [:]  
params.digest['dpnii'].ligation_site = 'GATCGATC'  
params.digest['arima'].restriction_site = '^GATC,G^ANT'  
params.digest['arima'] = [:]  
params.digest['arima'].ligation_site = 'GATCGATC,GATCGANT,GANTGATC,GANTGANT'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
  min_restriction_fragment_size = 0
  max_restriction_fragment_size = 0
  min_insert_size = 0
  max_insert_size = 0
  save_nonvalid_pairs = false
  dnase = false
  min_cis_dist = 0
  bin_size = '1000000'
  res_zoomify = '5000'
  hicpro_maps = false
  ice_max_iter = 100
  ice_filter_low_count_perc = 0.02
  ice_filter_high_count_perc =  0
  ice_eps = 0.1
  res_dist_decay = '250000'
  tads_caller = 'insulation'
  res_tads = '40000'
  res_compartments = '250000'
  skip_maps = false
  skip_balancing = false
  skip_mcool = false
  skip_dist_decay = false
  skip_compartments = false
  skip_tads = false
  skip_multiqc = false
  publish_dir_mode = 'copy'
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_name = null
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  validate_params = true
  show_hidden_params = false
  schema_ignore_params = 'genomes,digest,input_paths'
  max_memory = 24.GB
  max_cpus = 8
  max_time = 240.h
}
process.container = 'nfcore/hic:1.3.0'
includeConfig 'conf/base.ica.config'
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
