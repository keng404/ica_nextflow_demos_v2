if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.mode = 'alphafold2' // {alphafold2, colabfold}  
params.use_gpu = false  
params.alphafold2_mode = "standard"  
params.max_template_date = "2020-05-14"  
params.full_dbs = false // true full_dbs, false reduced_dbs  
params.alphafold2_model_preset = "monomer" // for AF2 {monomer  
params.alphafold2_db = null  
params.bfd = null  
params.small_bfd = null  
params.alphafold2_params = null  
params.mgnify = null  
params.pdb70 = null  
params.pdb_mmcif = null  
params.pdb_obsolete = null  
params.uniclust30 = null  
params.uniref90 = null  
params.pdb_seqres = null  
params.uniprot_sprot = null  
params.uniprot_trembl = null  
params.bfd_path = null  
params.small_bfd_path = null  
params.alphafold2_params_path = null  
params.mgnify_path = null  
params.pdb70_path = null  
params.pdb_mmcif_path = null  
params.uniclust30_path = null  
params.uniref90_path = null  
params.pdb_seqres_path = null  
params.uniprot_path = null  
params.colabfold_server = "webserver"  
params.colabfold_model_preset = "AlphaFold2-ptm" // {AlphaFold2-ptm,AlphaFold2-multimer-v1,AlphaFold2-multimer-v2}  
params.num_recycle = 3  
params.use_amber = true  
params.colabfold_db = null  
params.db_load_mode = 0  
params.host_url = null  
params.use_templates = true  
params.create_colabfold_index = false  
params.colabfold_db_link = null  
params.uniref30 = null  
params.colabfold_db_path = null  
params.uniref30_path = null  
params.multiqc_config = null  
params.multiqc_title = null  
params.multiqc_logo = null  
params.max_multiqc_email_size = '25.MB'  
params.multiqc_methods_description = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/proteinfold.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/proteinfold profiles: ${params.custom_config_base}/pipeline/proteinfold.config")
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
if (params.mode == 'alphafold2') {
    includeConfig 'conf/modules_alphafold2.config'
} else if (params.mode == 'colabfold') {
    includeConfig 'conf/modules_colabfold.config'
}
includeConfig 'conf/dbs.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
