if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.fasta = "data/*.fasta"  
params.allele_sheet = null  
params.include_proteins_from_vcf = false  
params.predict_class_1 = false  
params.predict_class_2 = false  
params.refine_fdr_on_predicted_subset = false  
params.skip_decoy_generation = false  
params.subset_affinity_threshold = 500  
params.variant_annotation_style = "SNPEFF"  
params.variant_frameshift_filter = false  
params.variant_indel_filter = false  
params.variant_reference = "GRCH38"  
params.variant_snp_filter = false  
params.activation_method = 'ALL'  
params.description_correct_features = 0  
params.digest_mass_range = "800:2500"  
params.enzyme = 'unspecific cleavage'  
params.fdr_threshold = 0.01  
params.fdr_level = 'peptide_level_fdrs'  
params.fixed_mods = ' '  
params.fragment_bin_offset = 0  
params.fragment_mass_tolerance = 0.02  
params.klammer = false  
params.max_rt_alignment_shift = 300  
params.number_mods = 3  
params.num_hits = 1  
params.peptide_min_length = 8  
params.peptide_max_length = 12  
params.pick_ms_levels = 2  
params.predict_RT = false  
params.prec_charge = '2:3'  
params.precursor_mass_tolerance = 5  
params.quantification_fdr = null  
params.quantification_min_prob = 0  
params.remove_precursor_peak = false  
params.run_centroidisation = false  
params.skip_quantification = false  
params.spectrum_batch_size = 500  
params.subset_max_train = 0  
params.use_x_ions = false  
params.use_z_ions = false  
params.use_a_ions = false  
params.use_c_ions = false  
params.use_NL_ions = false  
params.variable_mods = 'Oxidation  
params.vcf_sheet = null  
params.annotate_ions = false  
params.skip_multiqc = false  
params.multiqc_config = null  
params.multiqc_title = null  
params.multiqc_logo = null  
params.max_multiqc_email_size = '25.MB'  
params.multiqc_methods_description = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/mhcquant.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/mhcquant profiles: ${params.custom_config_base}/pipeline/mhcquant.config")
}
includeConfig 'conf/modules.config'
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
