params.input = './samplesheet.csv'  
params.protocol = null  
params.input_path = null  
params.flowcell = null  
params.kit = null  
params.barcode_kit = null  
params.barcode_both_ends = false  
params.trim_barcodes = false  
params.guppy_config = null  
params.guppy_model = null  
params.guppy_gpu = false  
params.guppy_gpu_runners = 6  
params.guppy_cpu_threads = 1  
params.gpu_device = 'auto'  
params.gpu_cluster_options = null  
params.output_demultiplex_fast5 = false  
params.qcat_min_score = 60  
params.qcat_detect_middle = false  
params.skip_basecalling = false  
params.skip_demultiplexing = false  
params.nanolyse_fasta = null  
params.run_nanolyse = false  
params.aligner = 'minimap2'  
params.stranded = false  
params.save_align_intermeds = false  
params.skip_alignment = false  
params.call_variants = false  
params.variant_caller = 'medaka'  
params.structural_variant_caller = 'sniffles'  
params.split_mnps = false  
params.phase_vcf = false  
params.skip_vc = false  
params.skip_sv = false  
params.deepvariant_gpu = false  
params.skip_bigbed = false  
params.skip_bigwig = false  
params.quantification_method = 'bambu'  
params.skip_quantification = false  
params.skip_differential_analysis = false  
params.skip_modification_analysis = false  
params.skip_xpore = false  
params.skip_m6anet = false  
params.skip_fusion_analysis = false  
params.jaffal_ref_dir = null  
params.skip_qc = false  
params.skip_pycoqc = false  
params.skip_nanoplot = false  
params.skip_fastqc = false  
params.skip_multiqc = false  
params.multiqc_config = null  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.help = false  
params.igenomes_base = 's3://ngi-igenomes/igenomes/' //note  
params.max_multiqc_email_size = '25.MB' //note  
params.multiqc_title = null //note  
params.plaintext_email = false  
params.monochrome_logs = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
