if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.input = null  
params.genome = null  
params.transcript_fasta = null  
params.additional_fasta = null  
params.splicesites = null  
params.gtf_extra_attributes = 'gene_name'  
params.gtf_group_features = 'gene_id'  
params.featurecounts_feature_type = 'exon'  
params.featurecounts_group_type = 'gene_biotype'  
params.gencode = false  
params.save_reference = false  
params.igenomes_base = 's3://ngi-igenomes/igenomes'  
params.with_umi = false  
params.skip_umi_extract = false  
params.umitools_extract_method = 'string'  
params.umitools_grouping_method = 'directional'  
params.umitools_dedup_stats = false  
params.umitools_bc_pattern = null  
params.umitools_bc_pattern2 = null  
params.umitools_umi_separator = null  
params.umi_discard_read = null  
params.save_umi_intermeds = false  
params.min_trimmed_reads = 10000  
params.clip_r1 = null  
params.clip_r2 = null  
params.three_prime_clip_r1 = null  
params.three_prime_clip_r2 = null  
params.trim_nextseq = null  
params.save_trimmed = false  
params.skip_trimming = false  
params.bbsplit_fasta_list = null  
params.save_bbsplit_reads = false  
params.skip_bbsplit = true  
params.remove_ribo_rna = false  
params.save_non_ribo_reads = false  
params.ribo_database_manifest = "${projectDir}/assets/rrna-db-defaults.txt"  
params.aligner = 'star_salmon'  
params.pseudo_aligner = null  
params.seq_center = null  
params.bam_csi_index = false  
params.star_ignore_sjdbgtf = false  
params.salmon_quant_libtype = null  
params.hisat2_build_memory = '200.GB' // Amount of memory required to build HISAT2 index with splice sites  
params.stringtie_ignore_gtf = false  
params.min_mapped_reads = 5  
params.extra_star_align_args = null  
params.extra_salmon_quant_args = null  
params.save_merged_fastq = false  
params.save_unaligned = false  
params.save_align_intermeds = false  
params.skip_markduplicates = false  
params.skip_alignment = false  
params.skip_qc = false  
params.skip_bigwig = false  
params.skip_stringtie = false  
params.skip_fastqc = false  
params.skip_preseq = true  
params.skip_dupradar = false  
params.skip_qualimap = false  
params.skip_rseqc = false  
params.skip_biotype_qc = false  
params.skip_deseq2_qc = false  
params.skip_multiqc = false  
params.deseq2_vst = true  
params.rseqc_modules = 'bam_stat,inner_distance,infer_experiment,junction_annotation,junction_saturation,read_distribution,read_duplication'  
params.multiqc_config = null  
params.multiqc_title = null  
params.multiqc_logo = null  
params.max_multiqc_email_size = '25.MB'  
params.multiqc_methods_description = null  
params.plaintext_email = false  
params.monochrome_logs = false  
params.hook_url = null  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'genomes'  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
params.genomes = [:]  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
try {
    includeConfig "${params.custom_config_base}/pipeline/rnaseq.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/rnaseq profiles: ${params.custom_config_base}/pipeline/rnaseq.config")
}
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
