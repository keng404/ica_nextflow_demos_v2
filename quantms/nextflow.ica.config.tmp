if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'assets/multiqc_config.yml'
}
params.input = null // the sdrf and spectra parameters are inferred from this one  
params.root_folder = null  
params.local_input_type = null  
params.database = null  
params.acquisition_method = null  
params.posterior_probabilities = 'percolator'  
params.add_decoys = false  
params.enable_pmultiqc = true  
params.search_engines = 'comet'  
params.psm_pep_fdr_cutoff = 0.10  
params.protein_level_fdr_cutoff = 0.05  
params.decoydatabase_debug = 0  
params.pp_debug = 0  
params.idfilter_debug = 0  
params.idscoreswitcher_debug = 0  
params.iso_debug = 0  
params.db_debug = 0  
params.idpep_debug = 0  
params.percolator_debug = 0  
params.consensusid_debug = 0  
params.idmapper_debug = 0  
params.luciphor_debug = 0  
params.protein_inference_debug = 0  
params.plfq_debug = 0  
params.decoy_string = 'DECOY_'  
params.decoy_string_position = 'prefix'  
params.decoy_method = 'reverse'  
params.shuffle_max_attempts = 30  
params.shuffle_sequence_identity_threshold = 0.5  
params.openms_peakpicking = false  
params.peakpicking_inmemory = false  
params.peakpicking_ms_levels = null // means all/auto  
params.labelling_type = null  
params.reference_channel = 126  
params.min_precursor_intensity = 1.0  
params.reporter_mass_shift = 0.002  
params.select_activation = 'HCD'  
params.isotope_correction = true  
params.iso_normalization = false  
params.min_reporter_intensity = 0.0  
params.min_precursor_purity = 0.0  
params.precursor_isotope_deviation = 10.0  
params.enzyme = 'Trypsin'  
params.num_enzyme_termini = 'fully'  
params.allowed_missed_cleavages = 2  
params.precursor_mass_tolerance = 5  
params.precursor_mass_tolerance_unit = 'ppm'  
params.fixed_mods = 'Carbamidomethyl  
params.variable_mods = 'Oxidation  
params.enable_mod_localization = false  
params.mod_localization = 'Phospho  
params.fragment_mass_tolerance = 0.03  
params.fragment_mass_tolerance_unit = 'Da'  
params.fragment_method = 'HCD' //currently unused. hard to find a good logic to beat the defaults  
params.isotope_error_range = '0,1'  
params.instrument = null //auto-determined from tolerances  
params.protocol = 'automatic'  
params.min_precursor_charge = 2  
params.max_precursor_charge = 4  
params.min_peptide_length = 6  
params.max_peptide_length = 40  
params.num_hits = 1  
params.max_mods = 3  
params.IL_equivalent = true  
params.unmatched_action = "warn"  
params.outlier_handling = "none"  
params.protein = false  
params.train_FDR = 0.05  
params.test_FDR = 0.05  
params.FDR_level = 'peptide-level-fdrs'  
params.klammer = false  
params.description_correct_features = 0  
params.subset_max_train = 300000  
params.consensusid_algorithm = 'best'  
params.min_consensus_support = 0  
params.consensusid_considered_top_hits = 0  
params.luciphor_neutral_losses = null  
params.luciphor_decoy_mass = null  
params.luciphor_decoy_neutral_losses = null  
params.top_PSMs = 1  
params.update_PSM_probabilities = false  
params.picked_fdr = true  
params.protein_score = 'best' // Other options are "Best", "Product", "Sum"  
params.min_peptides_per_protein = 1  
params.use_shared_peptides = true  
params.top = 3  
params.average = 'median'  
params.best_charge_and_fraction = false  
params.normalize = false  
params.ratios = false  
params.fix_peptides = false  
params.include_all = true  
params.protein_inference_method = 'aggregation'  
params.protein_quant = 'unique_peptides'  
params.quantification_method = 'feature_intensity'  
params.targeted_only = true  
params.mass_recalibration = false  
params.transfer_ids = 'false'  
params.alignment_order = 'star'  
params.add_triqler_output = false  
params.quantify_decoys = false  
params.matrix_spec_q = 0.01  
params.diann_debug = 3  
params.min_pr_mz = null  
params.max_pr_mz = null  
params.min_fr_mz = null  
params.max_fr_mz = null  
params.diann_normalize = true  
params.msstats_remove_one_feat_prot = true  
params.ref_condition = null  
params.contrasts = 'pairwise'  
params.skip_post_msstats = false  
params.msstatslfq_removeFewMeasurements = true  
params.msstatslfq_feature_subset_protein = 'top3'  
params.msstatslfq_quant_summary_method = 'TMP'  
params.msstatsiso_useunique_peptide = true  
params.msstatsiso_rmpsm_withfewmea_withinrun = true  
params.msstatsiso_summaryformultiple_psm = 'sum'  
params.msstatsiso_summarization_method = 'msstats'  
params.msstatsiso_global_norm = true  
params.msstatsiso_remove_norm_channel = true  
params.msstatsiso_reference_normalization = true  
params.enable_qc = false  
params.ptxqc_report_layout = null  
params.multiqc_config = null  
params.multiqc_title = null  
params.max_multiqc_email_size = '25.MB'  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'modules'  
singularity_pull_docker_container = false  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = [:]  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.config_profile_name = null  
params.max_memory = '128.GB'  
params.max_cpus = 16  
params.max_time = '240.h'  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
includeConfig 'conf/base.ica.config'
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
includeConfig 'conf/modules.config'
process.shell = ['/bin/bash', '-euo', 'pipefail']
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
includeConfig 'conf/modules.config'
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
