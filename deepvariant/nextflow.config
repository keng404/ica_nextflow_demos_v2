/*
 * -------------------------------------------------
 *  nf-core/deepvariant Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

 // Global default params, used in configs
 params {

   container = 'nfcore/deepvariant:1.0'

   help = false
   outdir = 'results'
   email = false
   name = false

   // BAM files
   bam=false
   bam_folder=false
   bam_file_prefix="*"
   getBai=false

   // Reference genomes
   genome = false
   genomes_base = 's3://deepvariant-data/genomes'
   testBaseFolder = 's3://deepvariant-test/input'

   // Exome data
   exome=false
   bed=false

   // Params for the Read Group Line to be added just in case its needed.
   rgid=4
   rglb="lib1"
   rgpl="illumina"
   rgpu="unit1"
   rgsm=20

   tracedir = "${params.outdir}/pipeline_info"
   clusterOptions = false
   awsqueue = false
   awsregion = 'eu-west-1'
   manifest.version = '1.0'
 }

profiles {

  standard {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genomes.config'
  }
  conda { process.conda = "$baseDir/environment.yml" }
  docker { docker.enabled = true }
  singularity {
    singularity.enabled = true
  }

  binac {
    includeConfig 'conf/base.config'
    includeConfig 'conf/binac.config'
    includeConfig 'conf/genomes.config'
  }
  awsbatch {
    includeConfig 'conf/base.config'
    includeConfig 'conf/awsbatch.config'
    includeConfig 'conf/genomes.config'
  }
  test {
    includeConfig 'conf/base.config'
    includeConfig 'conf/test.config'
    includeConfig 'conf/genomes.config'
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  none {
    // Don't load any config (for use with custom home configs)
  }

  // Profile for testing s3 environment
  test_s3{
    includeConfig 'conf/base.config'
    params.fasta="${params.testBaseFolder}/ucsc.hg19.chr20.unittest.fasta"
    params.fai="${params.testBaseFolder}/ucsc.hg19.chr20.unittest.fasta.fai"
    params.fastagz="${params.testBaseFolder}/ucsc.hg19.chr20.unittest.fasta.gz"
    params.gzfai="${params.testBaseFolder}/ucsc.hg19.chr20.unittest.fasta.gz.fai"
    params.gzi="${params.testBaseFolder}/ucsc.hg19.chr20.unittest.fasta.gz.gzi"
    params.bam_folder="${params.testBaseFolder}"
    params.bed = 'https://github.com/nf-core/test-datasets/raw/deepvariant/testdata/test_nist.b37_chr20_100kbp_at_10mb.bed'
  }

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/deepvariant_dag.svg"
}

manifest {
  name = 'nf-core/deepvariant'
  author = 'Phil Palmer'
  homePage = 'https://github.com/nf-core/deepvariant'
  description = 'Google DeepVariant variant caller as a Nextflow pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=18.10.1'
  version = '1.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
