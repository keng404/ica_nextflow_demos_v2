if(params.ica_smoke_test) {
    params.input = null
   includeConfig 'conf/test_full.config'
}
params.ncrna = false  
params.pseudogenes = false  
params.altorfs = false  
params.vcf = false  
params.cbioportal = false  
params.cosmic = false  
params.cosmic_celllines = false  
params.ensembl = false  
params.gnomad = false  
params.add_reference = true  
params.clean_database = false  
params.minimum_aa = 6  
params.add_stop_codons = true  
params.cosmic_user_name = null  
params.cosmic_password = null  
params.ensembl_downloader_config = "$projectDir/conf/ensembl_downloader_config.yaml"  
params.ensembl_config = "$projectDir/conf/ensembl_config.yaml"  
params.cosmic_config = "$projectDir/conf/cosmic_config.yaml"  
params.cbioportal_config = "$projectDir/conf/cbioportal_config.yaml"  
params.protein_decoy_config = "$projectDir/conf/protein_decoy.yaml"  
params.ensembl_name = 'homo_sapiens'  
params.* = and  
params.biotypes = [  
params.vcf_file = false  
params.cosmic_cancer_type = 'all'  
params.cosmic_cellline_name = 'all'  
params.cbioportal_study_id = 'all'  
params.cbioportal_accepted_values = 'all'  
params.cbioportal_filter_column = 'CANCER_TYPE'  
params.af_field = "" // set to empty when AF_field does not exist in the INFO filed or filtering on AF is not desired  
params.final_database_protein = "final_proteinDB.fa"  
params.decoy_prefix = "Decoy_"  
params.decoy = false  
params.decoy_method = "decoypyrat"  
params.decoy_enzyme = "Trypsin"  
params.gencode_url = "ftp://ftp.ebi.ac.uk/pub/databases/gencode/Gencode_human/release_19"  
params.gnomad_file_url = "gs://gnomad-public/release/2.1.1/vcf/exomes/gnomad.exomes.r2.1.1.sites.vcf.bgz" // use for testing the pipeline, smaller file - only exomes  
params.max_multiqc_email_size = 25.MB  
params.plaintext_email = false  
params.monochrome_logs = false  
params.help = false  
params.custom_config_version = 'master'  
params.custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"  
params.hostnames = false  
params.config_profile_name = null  
params.config_profile_description = null  
params.config_profile_contact = null  
params.config_profile_url = null  
params.validate_params = true  
params.show_hidden_params = false  
params.schema_ignore_params = 'biotypes'  
params.max_memory = 128.GB  
params.max_cpus = 16  
params.max_time = 240.h  
docker.enabled = true  
docker.userEmulation = true  
params.outdir = 'out'  
params.publish_dir_mode = 'copy'  
params.conda_enabled = false  
params.igenomes_ignore = false  
params.enable_conda = false  
params.email_on_fail = null  
params.email = null  
process = [:]  
params.ica_smoke_test = false  
process.container = 'nfcore/pgdb:1.0.0'
includeConfig 'conf/base.ica.config'
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}
process.shell = ['/bin/bash', '-euo', 'pipefail']
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
